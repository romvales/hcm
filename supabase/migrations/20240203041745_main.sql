
CREATE SCHEMA IF NOT EXISTS collection;

DROP TYPE IF EXISTS WorkerStatus CASCADE;
CREATE TYPE WorkerStatus AS enum (
  'OFFLINE',
  'ONLINE',
  'RONLINE',
  'AWAY',

  'SUSPENDED',
  'RESIGNED',
  'TERMINATED',
  'LEAVE',
  'ONCALL'
);

DROP TYPE IF EXISTS WorkerType CASCADE;
CREATE TYPE WorkerType AS enum (
  'PART',
  'FULL',
  'SEASONAL',
  'TEMPORARY',
  'LEASED'
);

DROP TYPE IF EXISTS WorkerPayCycle CASCADE;
CREATE TYPE WorkerPayCycle AS enum (
  'WEEKLY',
  'BIWEEKLY',
  'SEMIMONTHLY',
  'MONTHLY',

  -- TODO: Add a feature which an HR can specify a custom pay cycle for a worker
  'CUSTOM'
);

DROP TYPE IF EXISTS RoleStatus CASCADE;
CREATE TYPE RoleStatus AS enum (
  'ACTIVE',
  'INACTIVE',
  'REVIEW',
  'TERMINATED'
);

DROP TYPE IF EXISTS TeamStatus CASCADE;
CREATE TYPE TeamStatus AS enum (
  'ACTIVE',
  'INACTIVE',
  'REVIEW',
  'TERMINATED'
);

DROP TYPE IF EXISTS WorkerGender CASCADE;
CREATE TYPE WorkerGender AS enum (
  'MALE',
  'FEMALE',
  'OTHER'
);

DROP TYPE IF EXISTS AttendancePerformanceLabel CASCADE;
CREATE TYPE AttendancePerformanceLabel AS enum (
  'BELOW',
  'POOR',
  'NORMAL',
  'GOOD',
  'PRODUCTIVE'
);

DROP TYPE IF EXISTS AttendanceClockInType CASCADE;
CREATE TYPE AttendanceClockInType AS enum (
  'ONCALLSHIFT',
  'HOLIDAYSHIFT',
  'NIGHTSHIFT',
  'NORMALSHIFT'
);

DROP TYPE IF EXISTS AttendanceClockOutType CASCADE;
CREATE TYPE AttendanceClockOutType AS enum (
  'LUNCHTIME',
  'BREAKTIME',
  'ENDSHIFT',
  'MEETING',
  'EMERGENCY',
  'CUSTOM'
);

DROP TYPE IF EXISTS AttendanceType CASCADE;
CREATE TYPE AttendanceType AS enum (
  'ONCALL',
  'DAYOFF',
  'HALFDAY',
  'NIGHT'
);

DROP TYPE IF EXISTS AttendanceStatus CASCADE;
CREATE TYPE AttendanceStatus AS enum (
  'PRESENT',
  'LATE',
  'OVERRIDE',
  'HOLIDAY',
  'OVERTIME'
);

DROP TYPE IF EXISTS StandardShiftDay CASCADE;
CREATE TYPE StandardShiftDay AS enum (
  'MONDAY',
  'TUESDAY',
  'WEDNESDAY',
  'THURSDAY',
  'FRIDAY',
  'SATURDAY',
  'SUNDAY'
);

DROP TYPE IF EXISTS OverrideShiftStatus CASCADE;
CREATE TYPE OverrideShiftStatus AS enum (
  'PENDING',
  'VERIFIED',
  'ASSIGNED',
  'DONE'
);

DROP TYPE IF EXISTS CompensationStatus CASCADE;
CREATE TYPE CompensationStatus AS enum (
  'PENDING',
  'APPROVED',
  'REJECTED',
  'PAID'
);

DROP TYPE IF EXISTS AdditionScope CASCADE;
CREATE TYPE AdditionScope AS enum (
  'GLOBAL',
  'ROLE',
  'TEAM',
  'WORKER'
);

DROP TYPE IF EXISTS AdditionType CASCADE;
CREATE TYPE AdditionType AS enum (
  'REIMBURSEMENT',
  'BONUS',
  'COMMISSION',
  'OTHER'
);

DROP TYPE IF EXISTS AdditionStatus CASCADE;
CREATE TYPE AdditionStatus AS enum (
  'PENDING',
  'VERIFIED',
  'REJECT',
  'WAITING',
  'DISABLED'
);

DROP TYPE IF EXISTS DeductionScope CASCADE;
CREATE TYPE DeductionScope AS enum (
  'GLOBAL',
  'ROLE',
  'TEAM',
  'WORKER'
);

DROP TYPE IF EXISTS DeductionType CASCADE;
CREATE TYPE DeductionType AS enum (
  'TAX',
  'BENEFIT',
  'REIMBURSEMENT',
  'GARNISHMENT',
  'OTHER'
);

DROP TYPE IF EXISTS DeductionStatus CASCADE;
CREATE TYPE DeductionStatus AS enum (
  'PENDING',
  'VERIFIED',
  'REJECT',
  'WAITING',
  'DISABLED'
);

DROP TYPE IF EXISTS WorkerPayInfoType CASCADE;
CREATE TYPE WorkerPayInfoType AS enum (
  'HOURLY',
  'SALARY',
  'NONEXEMPT'
);

DROP TYPE IF EXISTS OrganizationStatus CASCADE;
CREATE TYPE OrganizationStatus AS enum (
  'ACTIVE',
  'INACTIVE',
  'SUSPENDED',
  'DISSOLVED'
);

DROP TYPE IF EXISTS OrganizationIndustry CASCADE;
CREATE TYPE OrganizationIndustry AS enum (
  'AGRICULTURE',
  'PRODUCTION',
  'CHEMICAL',
  'COMMERCE',
  'CONSTRUCTION',
  'EDUCATION',
  'FINANCIAL',
  'RETAIL',
  'FORESTRY',
  'HEALTH',
  'HOSPITALITY',
  'MINING',
  'MECHANICAL',
  'PUBLIC_SERVICE',
  'TELECOM',
  'SHIPPING',
  'TEXTILE',
  'TRANSPORT',
  'EQUIPMENT',
  'UTILITIES',
  'OTHER'
);

DROP TYPE IF EXISTS PendingJoinRequestInvitationType CASCADE;
CREATE TYPE PendingJoinRequestInvitationType AS enum (
  'ORGANIZATION',
  'WORKER'
);

DROP TYPE IF EXISTS PendingJoinRequestStatus CASCADE;
CREATE TYPE PendingJoinRequestStatus AS enum (
  'PENDING',
  'ACCEPTED',
  'REJECTED',
  'EXPIRED'
);

DROP TYPE IF EXISTS PayrollStatus CASCADE;
CREATE TYPE PayrollStatus AS enum (
  'PENDING',
  'VERIFIED',
  'PAID'
);


DROP TYPE IF EXISTS PayrollPayCycleType CASCADE;
CREATE TYPE PayrollPayCycleType AS enum (
  'WEEKLY',
  'BIWEEKLY',
  'SEMIMONTHLY',
  'MONTHLY',

  -- TODO: Enables any worker to create a custom payroll pay period
  'CUSTOM'
);

CREATE TABLE IF NOT EXISTS public.workers (
  id bigint generated by default as identity primary key,

  -- When created by someone, manually set an 
  createdById bigint null references public.workers(id) on delete set null,
  updatedById bigint null references public.workers(id) on delete set null,

  createdAt timestamp not null default now(),
  lastUpdatedAt timestamp null,

  pictureUrl text null,
  firstName text not null,
  lastName text not null,
  middleName text null,
  birthdate date null,

  gender WorkerGender not null,

  username text not null,
  email text not null,
  mobile text not null,

  -- Simplify addresses to JSON
  addresses json not null default '[]'::json
);

CREATE TABLE IF NOT EXISTS public.workerIdentityCards (
  id bigint generated by default as identity primary key,
  -- Who owns this identity card?
  workerId bigint not null references public.workers(id) on delete cascade,
  createdById bigint not null references public.workers(id) on delete set null,
  updatedById bigint null references public.workers(id) on delete set null,

  createdAt timestamp not null default now(),
  lastUpdatedAt timestamp null,

  frontImageUrl text not null,
  backImageUrl text not null,

  -- TODO: Extract information from the `frontImageUrl` and `backImageUrl` using AI
  extractedInfo json null default '{}'::json
);

-- @collection
CREATE TABLE IF NOT EXISTS collection.workersIdentityCards (
  id bigint generated by default as identity primary key, 
  ownerId bigint not null references public.workers(id) on delete cascade,
  cardId bigint not null references public.workerIdentityCards(id) on delete cascade
);

CREATE TABLE IF NOT EXISTS public.organizations (
  id bigint generated by default as identity primary key,

  createdById bigint not null references public.workers(id) on delete set null,
  updatedById bigint null references public.workers(id) on delete set null
);

-- @collection
CREATE TABLE IF NOT EXISTS collection.organizationsMembers (
  id bigint generated by default as identity primary key,
  organizationId bigint not null references public.organizations(id) on delete cascade,
  workerId bigint not null references public.organizations(id) on delete cascade,

  status WorkerStatus null,
  type WorkerType null,

  -- TODO: Handle the case where a worker hires a worker
  hiredById bigint null references public.workers(id) on delete set null,

  createdAt timestamp not null default now(),
  lastUpdatedAt timestamp null,

  hiredAt date null,
  suspendedAt date null,
  leaveAt date null,
  terminatedAt date null,
  returnedAt date null,
  scheduledSuspensionAt date null,

  isRemote boolean not null default false,
  isHired boolean not null default false,
  isDayOff boolean not null default false,
  isOnCall boolean not null default false,
  isOnLeave boolean not null default false,
  isTerminated boolean not null default false,
  isSuspended boolean not null default false
);

-- @collection
CREATE TABLE IF NOT EXISTS collection.workerOrganizations (
  id bigint generated by default as identity primary key,
  workerId bigint not null references public.organizations(id) on delete cascade,
  organizationId bigint not null references public.organizations(id) on delete cascade
);

CREATE TABLE IF NOT EXISTS public.pendingJoinRequests (
  id bigint generated by default as identity primary key,
  workerId bigint not null references public.workers(id) on delete cascade,
  organizationId bigint not null references public.workers(id) on delete cascade,

  createdAt timestamp not null default now(),
  expiredAt timestamp not null
);

-- @collection
CREATE TABLE IF NOT EXISTS collection.organizationsPendingRequests (
  id bigint generated by default as identity primary key,
  organizationId bigint not null references public.organizations(id) on delete cascade,
  requestId bigint not null references public.pendingJoinRequests(id) on delete cascade
);

-- @collection
CREATE TABLE IF NOT EXISTS collection.workerPendingRequests (
  id bigint generated by default as identity primary key,
  workerId bigint not null references public.workers(id) on delete cascade,
  requestId bigint not null references public.pendingJoinRequests(id) on delete cascade
);

CREATE TABLE IF NOT EXISTS public.standardShifts (
  id bigint generated by default as identity primary key,
  createdById bigint not null references public.workers(id) on delete set null,
  updatedById bigint not null references public.workers(id) on delete set null,
  organizationId bigint not null references public.organizations(id) on delete cascade,

  createdAt timestamp not null default now(),
  lastUpdatedAt timestamp null,

  name text not null,
  day StandardShiftDay not null,

  clockIn time not null,
  clockOut time not null
);

-- Scheduled override shifts
CREATE TABLE IF NOT EXISTS public.overrideShifts (
  id bigint generated by default as identity primary key,
  organizationId bigint not null references public.organizations(id) on delete cascade,
  createdById bigint not null references public.workers(id) on delete set null,
  updatedById bigint null references public.workers(id) on delete set null,
  workerId bigint null references public.workers(id) on delete cascade,

  createdAt timestamp not null default now(),
  lastUpdatedAt timestamp null,
  verifiedAt timestamp null,
  completedAt timestamp null,

  startsOn date not null,
  endsOn date null,

  name text not null,
  -- What day will this overriden shift will start
  day StandardShiftDay not null,
  status OverrideShiftStatus not null,

  overrideClockIn time not null,
  overrideClockOut time not null
);

CREATE TABLE IF NOT EXISTS public.attendances (
  id bigint generated by default as identity primary key,
  workerId bigint not null references public.workers(id) on delete set null,
  shiftId bigint null references public.standardShifts(id) on delete set null,
  oShiftId bigint null references public.overrideShifts(id) on delete set null,
  createdById bigint not null references public.workers(id) on delete set null,
  updatedById bigint null references public.workers(id) on delete set null,

  createdAt timestamp not null default now(),
  lastUpdatedAt timestamp null,

  clockInType AttendanceClockInType null,
  clockOutType AttendanceClockOutType null,
  type AttendanceType null,
  status AttendanceStatus null,
  perfLabel AttendancePerformanceLabel null,

  clockIn timestamp not null default now(),
  clockOut timestamp null,

  isLate boolean not null default false,
  isOverride boolean not null default false,
  isHoliday boolean not null default false,
  isManual boolean not null default false,
  isOnBreak boolean not null default false,

  -- Represented in milliseconds
  computed numeric not null default 0,
  underTime numeric not null default 0,
  overTime numeric not null default 0,
  lateTime numeric not null default 0,
  breakTime numeric not null default 0
);

CREATE TABLE IF NOT EXISTS public.roles (
  id bigint generated by default as identity primary key,
  createdById bigint not null references public.workers(id) on delete set null,
  updatedById bigint null references public.workers(id) on delete set null,
  organizationId bigint not null references public.organizations(id) on delete cascade,

  createdAt timestamp not null default now(),
  lastUpdatedAt timestamp null,

  status RoleStatus null,

  name text not null
);

-- @collection
CREATE TABLE IF NOT EXISTS collection.workerRoles (
  id bigint generated by default as identity primary key,
  roleId bigint not null references public.roles(id) on delete cascade,
  workerId bigint not null references public.roles(id) on delete cascade
);

-- @collection
CREATE TABLE IF NOT EXISTS collection.rolesStandardShifts (
  id bigint generated by default as identity primary key,
  roleId bigint not null references public.roles(id) on delete cascade,
  standardShiftId bigint not null references public.standardShifts(id) on delete cascade
);

CREATE TABLE IF NOT EXISTS public.teams (
  id bigint generated by default as identity primary key,
  createdById bigint not null references public.workers(id) on delete cascade,
  updatedById bigint null references public.workers(id) on delete cascade,
  organizationId bigint not null references public.workers(id) on delete cascade,

  createdAt timestamp not null default now(),
  lastUpdatedAt timestamp null,

  status TeamStatus null,

  name text not null
);

-- @collection
CREATE TABLE IF NOT EXISTS collection.teamsMembers (
  id bigint generated by default as identity primary key,
  teamId bigint not null references public.teams(id) on delete cascade,
  workerId bigint not null references public.workers(id) on delete cascade
);

CREATE TABLE IF NOT EXISTS public.compensations (
  id bigint generated by default as identity primary key,
  createdById bigint not null references public.workers(id) on delete set null,
  updatedById bigint null references public.workers(id) on delete set null,
  organizationId bigint not null references public.organizations(id) on delete cascade,
  workerId bigint not null references public.workers(id) on delete set null,

  createdAt timestamp not null default now(),
  lastUpdatedAt timestamp null,
  paidAt timestamp null,
  approvedAt timestamp null,
  rejectedAt timestamp null,

  status CompensationStatus null,

  periodStart date not null,
  periodEnd date not null,

  gvalue numeric not null,
  avalue numeric not null default 0,
  dvalue numeric not null default 0,
  value numeric not null default 0
);

CREATE TABLE IF NOT EXISTS public.additions (
  id bigint generated by default as identity primary key,
  createdById bigint not null references public.workers(id) on delete set null,
  updatedById bigint null references public.workers(id) on delete set null,
  workerId bigint null references public.workers(id) on delete cascade,

  createdAt timestamp not null default now(),
  lastUpdatedAt timestamp null,
  effectiveAt timestamp null,

  type AdditionType null,
  scope AdditionScope null,
  status AdditionStatus null,

  isEphemeral boolean not null default false,

  name text null,
  value numeric not null default 0
);

CREATE TABLE IF NOT EXISTS public.deductions (
  id bigint generated by default as identity primary key,
  createdById bigint not null references public.workers(id) on delete set null,
  updatedById bigint null references public.workers(id) on delete set null,
  workerId bigint null references public.workers(id) on delete cascade,

  createdAt timestamp not null default now(),
  lastUpdatedAt timestamp null,
  effectiveAt timestamp null,

  type DeductionType null,
  scope DeductionScope null,
  status DeductionStatus null,

  isVoluntary boolean default false,
  isEphemeral boolean default false,

  name text null,
  value numeric not null default 0
);

CREATE TABLE IF NOT EXISTS public.payrolls (
  id bigint generated by default as identity primary key
);
