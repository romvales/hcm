syntax = "proto3";

package entities;

option go_package = "goServer/internal/core/pb";
option optimize_for = SPEED;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

//
//
//
// Table: workers
message Worker {
  enum Flag {
    UNKNOWN = 0;

    S_DELETED = 4;

    G_MALE = 8;
    G_FEMALE = 16;
    G_OTHER = 32;
  }

  int64 id = 1;
  optional string userId = 2;
  optional int64 createdById = 3;
  optional int64 updatedById = 4;
  google.protobuf.Timestamp createdAt = 5;
  optional google.protobuf.Timestamp lastUpdatedAt = 6;
  optional string pictureUrl = 7;
  string firstName = 8;
  string lastName = 9;
  optional string middleName = 10;
  optional google.protobuf.Timestamp birthdate = 11;
  string username = 12;
  string email = 13;
  optional string mobile = 14;
  repeated google.protobuf.Struct addresses = 15;
  uint32 flags = 16;
  string uuid = 17;
}

//
//
//
// Table: workerIdentityCards
message WorkerIdentityCard {
  enum Flag {
    UNKNOWN = 0;

    S_DELETED = 4;

    C_EMPLOYEE = 8;
    C_SCHOOL = 16;
    C_BUSINESS = 32;
    C_MEDICAL = 64;
    C_GOVERNMENT = 128;
    C_PASSPORT = 256;
    C_PROFESSION = 512;
    C_POSTAL = 1024;
    C_OTHER = 2048;

    T_PRIMARY = 4096;
    T_SECONDARY = 8192;
  }

  int64 id = 1;
  int64 workerId = 2;
  optional int64 createdById = 3;
  optional int64 updatedById = 4;
  google.protobuf.Timestamp createdAt = 5;
  optional google.protobuf.Timestamp lastUpdatedAt = 6;
  string frontImageUrl = 7;
  string backImageUrl = 8;
  string name = 9;
  optional google.protobuf.Struct extractedInfo = 10;
  uint32 flags = 11;
  string uuid = 18;
}

//
//
//
// Table: workersVerifiedIdentityCards
message VerifiedWorkerIdentityCardRelation {
  int64 id = 1;
  int64 ownerId = 2;
  int64 verifiedById = 3;
  int64 cardId = 4;
}

//
//
//
// Table: workerIdentityCards
message WorkerIdentityCardRelation {
  int64 id = 1;
  int64 ownerId = 2;
  int64 cardId = 3;
}

//
//
// Table: organizations
message Organization {
  enum Flag {
    UNKNOWN = 0;

    S_DELETED = 4;
  }

  enum Industry {
    AGRICULTURE = 0;
    PRODUCTION = 1;
    CHEMICAL = 2;
    COMMERCE = 3;
    CONSTRUCTION = 4;
    EDUCATION = 5;
    FINANCIAL = 6;
    RETAIL = 7;
    FORESTRY = 8;
    HEALTH = 9;
    HOSPITALITY = 10;
    MINING = 11;
    MECHANICAL = 12;
    PUBLIC_SERVICE = 13;
    TELECOM = 14;
    SHIPPING = 15;
    TEXTILE = 16;
    TRANSPORT = 17;
    EQUIPMENT = 18;
    UTILITIES = 19;
    OTHER = 20;
  }

  int64 id = 1;
  optional int64 createdById = 2;
  optional int64 updatedById = 3;
  google.protobuf.Timestamp createdAt = 4;
  optional google.protobuf.Timestamp lastUpdatedAt = 5;
  Industry industry = 6;
  optional string overrideIndustry = 7;
  string name = 8;
  uint32 flags = 9;
  string uuid = 10;
  string username = 11;
}


//
//
// Table: organizationsMembers
message Member {
  enum Flag {
    UNKNOWN = 0;

    S_DELETED = 4;

    // Toggle each of these bits according to the current state
    // of the worker in an organization.
    S_REMOTE = 8;
    S_HIRED = 16;
    S_DAYOFF = 32;
    S_ONCALL = 64;
    S_ONLEAVE = 128;
    S_TERMINATED = 256;
    S_SUSPENDED = 512;

    T_FULLTIME = 1024;
    T_PARTTIME = 2048;
    T_SEASONAL = 4096;
    T_TEMPORARY = 8192;
    T_LEASED = 16384;
    T_CONTINGENT = 32768;
  }

  int64 id = 1;
  int64 organizationId = 2;
  int64 workerId = 3;
  optional int64 hiredById = 4;
  google.protobuf.Timestamp createdAt = 5;
  optional google.protobuf.Timestamp lastUpdatedAt = 6;
  optional google.protobuf.Timestamp hiredAt = 7;
  optional google.protobuf.Timestamp suspendedAt = 8;
  optional google.protobuf.Timestamp leaveAt = 9;
  optional google.protobuf.Timestamp terminatedAt = 10;
  optional google.protobuf.Timestamp returnedAt = 11;
  optional google.protobuf.Timestamp scheduledSuspensionAt = 12;
  uint32 flags = 15;
  string uuid = 16;

}

//
//
//
// Table: workerOrganizations
message WorkerOrganizationRelation {
  int64 id = 1;
  int64 workerId = 2;
  int64 organizationId = 3;
}

//
//
//
// Table: pendingJoinRequests
message JoinRequest {
  enum Flag {
    UNKNOWN = 0;

    S_DELETED = 4;

    S_WAIT = 8;
    S_ACCEPT = 16;
    S_REJECT = 32;
    S_EXPIRED = 64;
  }

  enum RequestSenderType {
    T_ORGANIZATION = 0;
    T_WORKER = 1;
  }

  int64 id = 1;
  int64 workerId = 2;
  int64 organizationId = 3;
  RequestSenderType senderType = 4;
  google.protobuf.Timestamp createdAt = 5;
  google.protobuf.Timestamp expiredAt = 6;
  uint32 flags = 7;
  string uuid = 8;
}

//
//
//
// Table: organizationsPendingRequests
message OrganizationPendingRequestRelation {
  int64 id = 1;
  int64 organizationId = 2;
  int64 requestId = 3;
}

//
//
//
// Table: workerPendingRequests
message WorkerPendingRequestRelation {
  int64 id = 1;
  int64 workerId = 2;
  int64 requestId = 3;
}

// @TOMORROW Decide whether we will have to put the rate in the role or individually on the Member message
//
//
//
// Table: roles
message Role {
  enum Flag {
    UNKNOWN = 0;

    S_DELETED = 4;
  }
  
  int64 id = 1;
  optional int64 createdById = 2;
  optional int64 updatedById = 3;
  int64 organizationId = 4;
  google.protobuf.Timestamp createdAt = 5;
  optional google.protobuf.Timestamp lastUpdatedAt = 6;
  string name = 7;
  uint32 flags = 8;
  string uuid = 9;
}

//
//
//
// Table: rolesStandardShifts
message RoleShiftRelation {
  int64 id = 1;
  int64 roleId = 2;
  int64 standardShiftId = 3;
}

//
//
//
// Table: workerRoles
message WorkerRoleRelation {
  int64 id = 1;
  int64 roleId = 2;
  int64 workerId = 3;
  int64 organizationId = 4;
}

//
//
//
// Table: teams
message Team {
  enum Flag {
    UNKNOWN = 0;

    S_DELETED = 4;
  }

  int64 id = 1;
  optional int64 createdById = 2;
  optional int64 updatedById = 3;
  int64 organizationId = 4;
  google.protobuf.Timestamp createdAt = 5;
  optional google.protobuf.Timestamp lastUpdatedAt = 6;
  string name = 7;
  uint32 flags = 8;
  string uuid = 9;
}

//
//
//
// Table: teamsMembers
message TeamMemberRelation {
  int64 id = 1;
  int64 teamId = 2;
  int64 workerId = 3;
}

// 
//
//
// Table: compensations
message Compensation {
  enum Flag {
    UNKNOWN = 0;

    S_DELETED = 4;

    S_PAID = 8;
  }

  enum CompensationScheme {
    WAGE = 0;
    SALARY = 1;
    COMMISSION = 2;
    BONUS = 3;
    TIP = 4;
  }

  int64 id = 1;
  int64 organizationId = 2;
  int64 workerId = 3;
  optional int64 createdById = 4;
  optional int64 updatedById = 5;
  google.protobuf.Timestamp createdAt = 6;
  optional google.protobuf.Timestamp lastUpdatedAt = 7;
  optional google.protobuf.Timestamp paidAt = 8;
  optional google.protobuf.Timestamp approvedAt = 9;
  optional google.protobuf.Timestamp rejectedAt = 10;
  google.protobuf.Timestamp periodStart = 11;
  google.protobuf.Timestamp periodEnd = 12;
  float gvalue = 13;
  float avalue = 14;
  float dvalue = 15;
  float value = 16;
  uint32 flags = 17;
  string uuid = 18;
  CompensationScheme scheme = 19;
}

//
//
//
// Table: additions
message Addition {
  enum Flag {
    UNKNOWN = 0;
    
    T_EPHEMERAL = 1;
    T_USED = 2;

    S_DELETED = 4;

    BT_OVERTIME = 8;
    BT_LEAVE = 16;
    BT_DEVELOPMENT = 32;
    BT_FOOD = 64;
    BT_GIFT = 128;
    BT_ACTIVITY = 256;
    BT_HEALTH = 512;
    BT_WELNESS = 1024;
    BT_ASSISTANCE = 2048;

    A_FIXED = 4096;
    A_FACTORED = 8192;

    // When A_MOCK bit flag is on, it indicates that this addition can be used as a template for new Addition.
    A_MOCK = 16384;
  }

  enum AdditionType {
    ALLOWANCE = 0;
    BENEFIT = 1;

    // Perks are cancelled out from the total compensation
    PERK = 2;
  }

  int64 id = 1;
  optional int64 createdById = 2;
  optional int64 updatedById = 3;
  optional int64 workerId = 4;
  google.protobuf.Timestamp createdAt = 5;
  optional google.protobuf.Timestamp lastUpdatedAt = 6;
  optional google.protobuf.Timestamp effectiveAt = 7;
  string name = 8;
  float value = 9;
  uint32 flags = 10;
  string uuid = 11;
  AdditionType typ = 12;
}

//
//
//
// Table: deductions
message Deduction {
  enum Flag {
    UNKNOWN = 0;

    T_EPHEMERAL = 1;
    T_USED = 2;

    S_DELETED = 4;

    DT_OPTIONAL = 8;
    DT_REQUIRED = 16;

    D_FIXED = 4096;
    D_FACTORED = 8192;

    // Just like A_MOCK bit flag, this bit flag can be switched on to indicate that this can be used as a template.
    D_MOCK = 16384;
  }

  enum DeductionType {
    INSURANCE = 0;
    TAX = 1;
    GARNISHMENT = 2;
    FINE = 3;
    OTHER = 4;
  }

  int64 id = 1;
  optional int64 createdById = 2;
  optional int64 updatedById = 3;
  optional int64 workerId = 4;
  google.protobuf.Timestamp createdAt = 5;
  optional google.protobuf.Timestamp lastUpdatedAt = 6;
  optional google.protobuf.Timestamp effectiveAt = 7;
  string name = 8;
  float value = 9;
  uint32 flags = 10;
  string uuid = 11;
  DeductionType typ = 12;
}

//
//
//
// Table: compensationsAdditions
message CompensationAdditionRelation {
  int64 id = 1;
  int64 compensationId = 2;
  int64 additionId = 3;
}

//
//
//
// Table: compensationDeductions
message CompensationDeductionRelation {
  int64 id = 1;
  int64 compensationId = 2;
  int64 deductionId = 3;
}

// @TOMORROW Refine and add related flags that are mandatory for a payroll
//
//
//
// Table: payrolls
message Payroll {
  enum Flag {
    UNKNOWN = 0;

    S_PAID = 1;

    S_DELETED = 4;
  }
  
  int64 id = 1;
  int64 createdById = 2;
  int64 updatedById = 3;
  optional int64 verifiedById = 4;
  int64 organizationId = 5;
  google.protobuf.Timestamp createdAt = 6;
  optional google.protobuf.Timestamp lastUpdatedAt = 7;
  optional google.protobuf.Timestamp verifiedAt = 8;
  float total = 9;
  uint32 flags = 10;
  string uuid = 11;
}

//
//
//
// Table: payrollCompensations
message PayrollCompensationRelation {
  int64 id = 1;
  int64 payrollId = 2;
  int64 compensationId = 3;
}

// @TOMORROW Refine the flags of the Attendance message
//
//
// Table: attendances
message Attendance {
  enum Flag {
    UNKNOWN = 0;

    S_DELETED = 4;
  }

  int64 id = 1;
  int64 workerId = 2;
  optional int64 shiftId = 3;
  optional int64 oshiftId = 4;
  optional int64 createdById = 5;
  optional int64 updatedById = 6;
  google.protobuf.Timestamp createdAt = 7;
  optional google.protobuf.Timestamp lastUpdatedAt = 8;
  google.protobuf.Timestamp clockIn = 9;
  google.protobuf.Timestamp clockOut = 10;
  int64 computed = 11;
  int64 underTime = 12;
  int64 overTime = 13;
  int64 lateTime = 14;
  int64 breakTime = 15;
  uint32 flags = 16;
  string uuid = 17;
}

enum ShiftDay {
  MON = 0;
  TUE = 1;
  WED = 2;
  THU = 3;
  FRI = 4;
  SAT = 5;
  SUN = 6;
}

// 
// 
// Table: standardShifts
message Shift {
  enum Flag {
    UNKNOWN = 0;

    S_DELETED = 4;
  }

  int64 id = 1;
  optional int64 createdById = 2;
  optional int64 updatedById = 3;
  int64 organizationId = 4;
  google.protobuf.Timestamp createdAt = 5;
  optional google.protobuf.Timestamp lastUpdatedAt = 6;
  string name = 7;
  ShiftDay day = 8;
  google.protobuf.Timestamp clockIn = 9;
  google.protobuf.Timestamp clockOut = 10;
  uint32 flags = 11;
  string uuid = 12;
  string groupId = 13;
}

// @TOMORROW Find a way in how an HR can set a holiday, special non-working, and weekend shift.
//
//
//
// Table: overrideShifts
message OverrideShift {
  enum Flag {
    UNKNOWN = 0;

    S_DELETED = 4;
  }

  int64 id = 1;
  int64 organizationId = 2;
  optional int64 createdById = 3;
  optional int64 updatedById = 4;
  optional int64 workerId = 5;
  google.protobuf.Timestamp createdAt = 6;
  optional google.protobuf.Timestamp lastUpdatedAt = 7;
  optional google.protobuf.Timestamp verifiedAt = 8;
  optional google.protobuf.Timestamp completedAt = 9;
  google.protobuf.Timestamp startsOn = 10;
  google.protobuf.Timestamp endsOn = 11;
  string name = 12;
  ShiftDay day = 13;
  google.protobuf.Timestamp overrideClockIn = 14;
  google.protobuf.Timestamp overrideClockOut = 15;
  string groupId = 16;
  uint32 flags = 17;
  string uuid = 18;
} 