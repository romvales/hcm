syntax = "proto3";

package entities;

option go_package = "goServer/internal/core/pb";
option optimize_for = SPEED;

import "hcmcore.proto";

//
service CoreService {
  rpc getWorkerById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc getOrganizationById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc getOrganizationsByCreatorId(CoreServiceRequest) returns (CoreServiceResponse);
  rpc getRoleById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc getTeamById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc getRolesFromOrganization(CoreServiceRequest) returns (CoreServiceResponse);
  rpc getTeamsFromOrganization(CoreServiceRequest) returns (CoreServiceResponse);
  rpc getOrganizationMembers(CoreServiceRequest) returns (CoreServiceResponse);
  rpc getOrganizationJoinRequests(CoreServiceRequest) returns (CoreServiceResponse);
  rpc getWorkerJoinRequests(CoreServiceRequest) returns (CoreServiceResponse);
  rpc getJoinRequestById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc getCompensationById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc getAdditionById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc getDeductionById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc getPayrollById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc getAttendanceById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc getShiftById(CoreServiceRequest) returns (CoreServiceResponse);

  rpc saveWorker(CoreServiceRequest) returns (CoreServiceResponse);
  rpc saveMember(CoreServiceRequest) returns (CoreServiceResponse);
  rpc saveWorkerIdentityCard(CoreServiceRequest) returns (CoreServiceResponse);
  rpc saveOrganization(CoreServiceRequest) returns (CoreServiceResponse);
  rpc saveRole(CoreServiceRequest) returns (CoreServiceResponse);
  rpc saveTeam(CoreServiceRequest) returns (CoreServiceResponse);
  rpc saveCompensation(CoreServiceRequest) returns (CoreServiceResponse);
  rpc saveAddition(CoreServiceRequest) returns (CoreServiceResponse);
  rpc saveDeduction(CoreServiceRequest) returns (CoreServiceResponse);
  rpc savePayroll(CoreServiceRequest) returns (CoreServiceResponse);
  rpc saveAttendance(CoreServiceRequest) returns (CoreServiceResponse);
  rpc saveShift(CoreServiceRequest) returns (CoreServiceResponse);
  rpc saveJoinRequest(CoreServiceRequest) returns (CoreServiceResponse);

  rpc deleteWorkerById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc deleteWorkerIdentityCardById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc deleteOrganizationById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc deleteRoleById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc deleteTeamById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc deleteCompensationById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc deleteAdditionById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc deleteDeductionById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc deleteAttendanceById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc deletePayrollById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc deleteShiftById(CoreServiceRequest) returns (CoreServiceResponse);
  rpc deleteJoinRequestById(CoreServiceRequest) returns (CoreServiceResponse);

  // @TOMORROW Add new related core functions for the hcm, with the help of these foundational RPCs
}

//
//
//
//
message CoreServiceRequest {
  enum CoreServiceRequestClient {
    C_SUPABASE = 0;
  }

  CoreServiceRequestClient usedClient = 1;
  bool clientUnsafe = 2;

  optional GetterRequest getterRequest = 3;
  optional SetterRequest setterRequest = 4;
}

//
//
//
//
message CoreServiceResponse {
  enum CoreServiceResponseCode {
    C_NOERROR = 0;
    C_DBERROR = 1;
    C_CLIENTERROR = 2;
    C_MISSINGPARAMETERS = 3;
  }

  CoreServiceResponseCode code = 1;
  
  optional GetterResponse getterResponse = 2;
  optional SetterResponse setterResponse = 3;
}

//
//
//
message GetterRequest {
  optional int64 targetId = 1;
  optional string targetUuid = 2;
  optional string userId = 3;

  optional SetterRequest.ShiftOpType targetShiftType = 4;
}

//
//
//
message GetterResponse {

  optional string errorMessage = 1;

  optional SetterRequest.ShiftOpType targetShiftType = 4;
  
  optional Worker workerResult = 5;
  optional Organization organizationResult = 6;
  repeated Organization organizationsResult = 7;
  optional Role roleResult = 8;
  optional Team teamResult = 9;
  optional WorkerIdentityCard identityCardResult = 10;
  optional Member memberResult = 11;
  optional Compensation compensationResult = 12;
  optional Addition additionResult = 13;
  optional Deduction deductionResult = 14;
  optional Payroll payrollResult = 15;
  optional Attendance attendanceResult = 16;
  optional Shift shiftResult = 17;
  optional OverrideShift overrideShiftResult = 18;
  repeated Role organizationRolesResult = 19;
  repeated Team organizationTeamsResult = 20;
  repeated Member membersResult = 21;
  repeated OrganizationPendingRequestRelation organizationPendingRequestsResult = 22;
  repeated WorkerPendingRequestRelation workerPendingRequestsResult = 23;
  optional JoinRequest joinRequestResult = 24;
}

//
//
//
message SetterRequest {
  enum ShiftOpType {
    T_SHIFT = 0;
    T_OVERRIDESHIFT = 1;
  }

  optional Worker workerTarget = 1;
  optional Organization organizationTarget = 2;
  optional Role roleTarget = 3;
  optional Team teamTarget = 4;

  optional int64 targetId = 5;
  optional string targetUuid = 6;
  optional string userId = 7;

  optional bool softDeleteOp = 8;

  optional ShiftOpType targetShiftType = 9;
  optional Shift shiftTarget = 10;
  optional OverrideShift overrideShiftTarget = 11;
  optional WorkerIdentityCard identityCardTarget = 12;
  optional Member memberTarget = 13;
  optional Compensation compensationTarget = 14;
  optional Addition additionTarget = 15;
  optional Deduction deductionTarget = 16;
  optional Payroll payrollTarget = 17;
  optional Attendance attendanceTarget = 18;

  optional int64 requestSenderId = 19;
  optional JoinRequest.RequestSenderType requestSenderType = 20;
}

//
//
//
message SetterResponse {
  optional Worker updatedWorkerTarget = 1;
  optional Organization updatedOrganizationTarget = 2;
  optional Role updatedRoleTarget = 3;
  optional Team updatedTeamTarget = 4;

  optional int64 targetId = 5;
  optional string targetUuid = 6;
  optional string userId = 7;

  optional string errorMessage = 10;
  bool softDeleteOp = 11;

  optional WorkerIdentityCard updatedIdentityCardTarget = 12;
  optional Member updatedMemberTarget = 13;
  optional Compensation updatedCompensationTarget = 14;
  optional Addition updatedAdditionTarget = 15;
  optional Deduction updatedDeductionTarget = 16;
  optional Payroll updatedPayrollTarget = 17;
  optional Attendance updatedAttendanceTarget = 18;
  optional Shift updatedShiftTarget = 19;
  optional OverrideShift updatedOverrideShiftTarget = 20;
  optional SetterRequest.ShiftOpType targetShiftType = 21;
  optional JoinRequest joinRequestResult = 22;
}