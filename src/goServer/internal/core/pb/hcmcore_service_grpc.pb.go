// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: hcmcore_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoreServiceClient is the client API for CoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreServiceClient interface {
	GetWorkerById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	GetOrganizationById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	GetOrganizationByCreatorId(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	GetRoleById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	GetTeamById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	GetRolesFromOrganization(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	GetTeamsFromOrganization(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	GetOrganizationMembers(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	GetOrganizationJoinRequests(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	GetWorkerJoinRequests(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	GetJoinRequestById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	GetCompensationById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	GetAdditionById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	GetDeductionById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	SaveWorker(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	SaveOrganization(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	SaveRole(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	SaveTeam(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	DeleteWorkerById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	DeleteOrganizationById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	DeleteRoleById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
	DeleteTeamById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error)
}

type coreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreServiceClient(cc grpc.ClientConnInterface) CoreServiceClient {
	return &coreServiceClient{cc}
}

func (c *coreServiceClient) GetWorkerById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/getWorkerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetOrganizationById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/getOrganizationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetOrganizationByCreatorId(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/getOrganizationByCreatorId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetRoleById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/getRoleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetTeamById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/getTeamById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetRolesFromOrganization(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/getRolesFromOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetTeamsFromOrganization(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/getTeamsFromOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetOrganizationMembers(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/getOrganizationMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetOrganizationJoinRequests(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/getOrganizationJoinRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetWorkerJoinRequests(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/getWorkerJoinRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetJoinRequestById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/getJoinRequestById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetCompensationById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/getCompensationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetAdditionById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/getAdditionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetDeductionById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/getDeductionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) SaveWorker(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/saveWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) SaveOrganization(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/saveOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) SaveRole(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/saveRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) SaveTeam(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/saveTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) DeleteWorkerById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/deleteWorkerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) DeleteOrganizationById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/deleteOrganizationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) DeleteRoleById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/deleteRoleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) DeleteTeamById(ctx context.Context, in *CoreServiceRequest, opts ...grpc.CallOption) (*CoreServiceResponse, error) {
	out := new(CoreServiceResponse)
	err := c.cc.Invoke(ctx, "/entities.CoreService/deleteTeamById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServiceServer is the server API for CoreService service.
// All implementations must embed UnimplementedCoreServiceServer
// for forward compatibility
type CoreServiceServer interface {
	GetWorkerById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	GetOrganizationById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	GetOrganizationByCreatorId(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	GetRoleById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	GetTeamById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	GetRolesFromOrganization(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	GetTeamsFromOrganization(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	GetOrganizationMembers(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	GetOrganizationJoinRequests(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	GetWorkerJoinRequests(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	GetJoinRequestById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	GetCompensationById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	GetAdditionById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	GetDeductionById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	SaveWorker(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	SaveOrganization(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	SaveRole(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	SaveTeam(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	DeleteWorkerById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	DeleteOrganizationById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	DeleteRoleById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	DeleteTeamById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error)
	mustEmbedUnimplementedCoreServiceServer()
}

// UnimplementedCoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoreServiceServer struct {
}

func (UnimplementedCoreServiceServer) GetWorkerById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerById not implemented")
}
func (UnimplementedCoreServiceServer) GetOrganizationById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationById not implemented")
}
func (UnimplementedCoreServiceServer) GetOrganizationByCreatorId(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationByCreatorId not implemented")
}
func (UnimplementedCoreServiceServer) GetRoleById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleById not implemented")
}
func (UnimplementedCoreServiceServer) GetTeamById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamById not implemented")
}
func (UnimplementedCoreServiceServer) GetRolesFromOrganization(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesFromOrganization not implemented")
}
func (UnimplementedCoreServiceServer) GetTeamsFromOrganization(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamsFromOrganization not implemented")
}
func (UnimplementedCoreServiceServer) GetOrganizationMembers(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationMembers not implemented")
}
func (UnimplementedCoreServiceServer) GetOrganizationJoinRequests(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationJoinRequests not implemented")
}
func (UnimplementedCoreServiceServer) GetWorkerJoinRequests(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerJoinRequests not implemented")
}
func (UnimplementedCoreServiceServer) GetJoinRequestById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJoinRequestById not implemented")
}
func (UnimplementedCoreServiceServer) GetCompensationById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompensationById not implemented")
}
func (UnimplementedCoreServiceServer) GetAdditionById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdditionById not implemented")
}
func (UnimplementedCoreServiceServer) GetDeductionById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeductionById not implemented")
}
func (UnimplementedCoreServiceServer) SaveWorker(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveWorker not implemented")
}
func (UnimplementedCoreServiceServer) SaveOrganization(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOrganization not implemented")
}
func (UnimplementedCoreServiceServer) SaveRole(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRole not implemented")
}
func (UnimplementedCoreServiceServer) SaveTeam(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTeam not implemented")
}
func (UnimplementedCoreServiceServer) DeleteWorkerById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkerById not implemented")
}
func (UnimplementedCoreServiceServer) DeleteOrganizationById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationById not implemented")
}
func (UnimplementedCoreServiceServer) DeleteRoleById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleById not implemented")
}
func (UnimplementedCoreServiceServer) DeleteTeamById(context.Context, *CoreServiceRequest) (*CoreServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeamById not implemented")
}
func (UnimplementedCoreServiceServer) mustEmbedUnimplementedCoreServiceServer() {}

// UnsafeCoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServiceServer will
// result in compilation errors.
type UnsafeCoreServiceServer interface {
	mustEmbedUnimplementedCoreServiceServer()
}

func RegisterCoreServiceServer(s grpc.ServiceRegistrar, srv CoreServiceServer) {
	s.RegisterService(&CoreService_ServiceDesc, srv)
}

func _CoreService_GetWorkerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetWorkerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/getWorkerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetWorkerById(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetOrganizationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetOrganizationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/getOrganizationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetOrganizationById(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetOrganizationByCreatorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetOrganizationByCreatorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/getOrganizationByCreatorId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetOrganizationByCreatorId(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetRoleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetRoleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/getRoleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetRoleById(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetTeamById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetTeamById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/getTeamById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetTeamById(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetRolesFromOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetRolesFromOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/getRolesFromOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetRolesFromOrganization(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetTeamsFromOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetTeamsFromOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/getTeamsFromOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetTeamsFromOrganization(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetOrganizationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetOrganizationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/getOrganizationMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetOrganizationMembers(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetOrganizationJoinRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetOrganizationJoinRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/getOrganizationJoinRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetOrganizationJoinRequests(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetWorkerJoinRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetWorkerJoinRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/getWorkerJoinRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetWorkerJoinRequests(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetJoinRequestById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetJoinRequestById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/getJoinRequestById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetJoinRequestById(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetCompensationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetCompensationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/getCompensationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetCompensationById(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetAdditionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetAdditionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/getAdditionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetAdditionById(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetDeductionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetDeductionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/getDeductionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetDeductionById(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_SaveWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).SaveWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/saveWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).SaveWorker(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_SaveOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).SaveOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/saveOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).SaveOrganization(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_SaveRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).SaveRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/saveRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).SaveRole(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_SaveTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).SaveTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/saveTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).SaveTeam(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_DeleteWorkerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).DeleteWorkerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/deleteWorkerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).DeleteWorkerById(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_DeleteOrganizationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).DeleteOrganizationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/deleteOrganizationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).DeleteOrganizationById(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_DeleteRoleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).DeleteRoleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/deleteRoleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).DeleteRoleById(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_DeleteTeamById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).DeleteTeamById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entities.CoreService/deleteTeamById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).DeleteTeamById(ctx, req.(*CoreServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreService_ServiceDesc is the grpc.ServiceDesc for CoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entities.CoreService",
	HandlerType: (*CoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getWorkerById",
			Handler:    _CoreService_GetWorkerById_Handler,
		},
		{
			MethodName: "getOrganizationById",
			Handler:    _CoreService_GetOrganizationById_Handler,
		},
		{
			MethodName: "getOrganizationByCreatorId",
			Handler:    _CoreService_GetOrganizationByCreatorId_Handler,
		},
		{
			MethodName: "getRoleById",
			Handler:    _CoreService_GetRoleById_Handler,
		},
		{
			MethodName: "getTeamById",
			Handler:    _CoreService_GetTeamById_Handler,
		},
		{
			MethodName: "getRolesFromOrganization",
			Handler:    _CoreService_GetRolesFromOrganization_Handler,
		},
		{
			MethodName: "getTeamsFromOrganization",
			Handler:    _CoreService_GetTeamsFromOrganization_Handler,
		},
		{
			MethodName: "getOrganizationMembers",
			Handler:    _CoreService_GetOrganizationMembers_Handler,
		},
		{
			MethodName: "getOrganizationJoinRequests",
			Handler:    _CoreService_GetOrganizationJoinRequests_Handler,
		},
		{
			MethodName: "getWorkerJoinRequests",
			Handler:    _CoreService_GetWorkerJoinRequests_Handler,
		},
		{
			MethodName: "getJoinRequestById",
			Handler:    _CoreService_GetJoinRequestById_Handler,
		},
		{
			MethodName: "getCompensationById",
			Handler:    _CoreService_GetCompensationById_Handler,
		},
		{
			MethodName: "getAdditionById",
			Handler:    _CoreService_GetAdditionById_Handler,
		},
		{
			MethodName: "getDeductionById",
			Handler:    _CoreService_GetDeductionById_Handler,
		},
		{
			MethodName: "saveWorker",
			Handler:    _CoreService_SaveWorker_Handler,
		},
		{
			MethodName: "saveOrganization",
			Handler:    _CoreService_SaveOrganization_Handler,
		},
		{
			MethodName: "saveRole",
			Handler:    _CoreService_SaveRole_Handler,
		},
		{
			MethodName: "saveTeam",
			Handler:    _CoreService_SaveTeam_Handler,
		},
		{
			MethodName: "deleteWorkerById",
			Handler:    _CoreService_DeleteWorkerById_Handler,
		},
		{
			MethodName: "deleteOrganizationById",
			Handler:    _CoreService_DeleteOrganizationById_Handler,
		},
		{
			MethodName: "deleteRoleById",
			Handler:    _CoreService_DeleteRoleById_Handler,
		},
		{
			MethodName: "deleteTeamById",
			Handler:    _CoreService_DeleteTeamById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hcmcore_service.proto",
}
