// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: hcmcore_service.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CoreServiceRequest_CoreServiceRequestClient int32

const (
	CoreServiceRequest_C_SUPABASE CoreServiceRequest_CoreServiceRequestClient = 0
)

// Enum value maps for CoreServiceRequest_CoreServiceRequestClient.
var (
	CoreServiceRequest_CoreServiceRequestClient_name = map[int32]string{
		0: "C_SUPABASE",
	}
	CoreServiceRequest_CoreServiceRequestClient_value = map[string]int32{
		"C_SUPABASE": 0,
	}
)

func (x CoreServiceRequest_CoreServiceRequestClient) Enum() *CoreServiceRequest_CoreServiceRequestClient {
	p := new(CoreServiceRequest_CoreServiceRequestClient)
	*p = x
	return p
}

func (x CoreServiceRequest_CoreServiceRequestClient) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoreServiceRequest_CoreServiceRequestClient) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_service_proto_enumTypes[0].Descriptor()
}

func (CoreServiceRequest_CoreServiceRequestClient) Type() protoreflect.EnumType {
	return &file_hcmcore_service_proto_enumTypes[0]
}

func (x CoreServiceRequest_CoreServiceRequestClient) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoreServiceRequest_CoreServiceRequestClient.Descriptor instead.
func (CoreServiceRequest_CoreServiceRequestClient) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_service_proto_rawDescGZIP(), []int{0, 0}
}

type CoreServiceResponse_CoreServiceResponseCode int32

const (
	CoreServiceResponse_C_NOERROR           CoreServiceResponse_CoreServiceResponseCode = 0
	CoreServiceResponse_C_DBERROR           CoreServiceResponse_CoreServiceResponseCode = 1
	CoreServiceResponse_C_CLIENTERROR       CoreServiceResponse_CoreServiceResponseCode = 2
	CoreServiceResponse_C_MISSINGPARAMETERS CoreServiceResponse_CoreServiceResponseCode = 3
)

// Enum value maps for CoreServiceResponse_CoreServiceResponseCode.
var (
	CoreServiceResponse_CoreServiceResponseCode_name = map[int32]string{
		0: "C_NOERROR",
		1: "C_DBERROR",
		2: "C_CLIENTERROR",
		3: "C_MISSINGPARAMETERS",
	}
	CoreServiceResponse_CoreServiceResponseCode_value = map[string]int32{
		"C_NOERROR":           0,
		"C_DBERROR":           1,
		"C_CLIENTERROR":       2,
		"C_MISSINGPARAMETERS": 3,
	}
)

func (x CoreServiceResponse_CoreServiceResponseCode) Enum() *CoreServiceResponse_CoreServiceResponseCode {
	p := new(CoreServiceResponse_CoreServiceResponseCode)
	*p = x
	return p
}

func (x CoreServiceResponse_CoreServiceResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoreServiceResponse_CoreServiceResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_service_proto_enumTypes[1].Descriptor()
}

func (CoreServiceResponse_CoreServiceResponseCode) Type() protoreflect.EnumType {
	return &file_hcmcore_service_proto_enumTypes[1]
}

func (x CoreServiceResponse_CoreServiceResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoreServiceResponse_CoreServiceResponseCode.Descriptor instead.
func (CoreServiceResponse_CoreServiceResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_service_proto_rawDescGZIP(), []int{1, 0}
}

type SetterRequest_ShiftOpType int32

const (
	SetterRequest_T_SHIFT         SetterRequest_ShiftOpType = 0
	SetterRequest_T_OVERRIDESHIFT SetterRequest_ShiftOpType = 1
)

// Enum value maps for SetterRequest_ShiftOpType.
var (
	SetterRequest_ShiftOpType_name = map[int32]string{
		0: "T_SHIFT",
		1: "T_OVERRIDESHIFT",
	}
	SetterRequest_ShiftOpType_value = map[string]int32{
		"T_SHIFT":         0,
		"T_OVERRIDESHIFT": 1,
	}
)

func (x SetterRequest_ShiftOpType) Enum() *SetterRequest_ShiftOpType {
	p := new(SetterRequest_ShiftOpType)
	*p = x
	return p
}

func (x SetterRequest_ShiftOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetterRequest_ShiftOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_service_proto_enumTypes[2].Descriptor()
}

func (SetterRequest_ShiftOpType) Type() protoreflect.EnumType {
	return &file_hcmcore_service_proto_enumTypes[2]
}

func (x SetterRequest_ShiftOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetterRequest_ShiftOpType.Descriptor instead.
func (SetterRequest_ShiftOpType) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_service_proto_rawDescGZIP(), []int{4, 0}
}

type CoreServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsedClient    CoreServiceRequest_CoreServiceRequestClient `protobuf:"varint,1,opt,name=usedClient,proto3,enum=entities.CoreServiceRequest_CoreServiceRequestClient" json:"usedClient,omitempty"`
	ClientUnsafe  bool                                        `protobuf:"varint,2,opt,name=clientUnsafe,proto3" json:"clientUnsafe,omitempty"`
	GetterRequest *GetterRequest                              `protobuf:"bytes,3,opt,name=getterRequest,proto3,oneof" json:"getterRequest,omitempty"`
	SetterRequest *SetterRequest                              `protobuf:"bytes,4,opt,name=setterRequest,proto3,oneof" json:"setterRequest,omitempty"`
}

func (x *CoreServiceRequest) Reset() {
	*x = CoreServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreServiceRequest) ProtoMessage() {}

func (x *CoreServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreServiceRequest.ProtoReflect.Descriptor instead.
func (*CoreServiceRequest) Descriptor() ([]byte, []int) {
	return file_hcmcore_service_proto_rawDescGZIP(), []int{0}
}

func (x *CoreServiceRequest) GetUsedClient() CoreServiceRequest_CoreServiceRequestClient {
	if x != nil {
		return x.UsedClient
	}
	return CoreServiceRequest_C_SUPABASE
}

func (x *CoreServiceRequest) GetClientUnsafe() bool {
	if x != nil {
		return x.ClientUnsafe
	}
	return false
}

func (x *CoreServiceRequest) GetGetterRequest() *GetterRequest {
	if x != nil {
		return x.GetterRequest
	}
	return nil
}

func (x *CoreServiceRequest) GetSetterRequest() *SetterRequest {
	if x != nil {
		return x.SetterRequest
	}
	return nil
}

type CoreServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           CoreServiceResponse_CoreServiceResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=entities.CoreServiceResponse_CoreServiceResponseCode" json:"code,omitempty"`
	GetterResponse *GetterResponse                             `protobuf:"bytes,2,opt,name=getterResponse,proto3,oneof" json:"getterResponse,omitempty"`
	SetterResponse *SetterResponse                             `protobuf:"bytes,3,opt,name=setterResponse,proto3,oneof" json:"setterResponse,omitempty"`
}

func (x *CoreServiceResponse) Reset() {
	*x = CoreServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreServiceResponse) ProtoMessage() {}

func (x *CoreServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreServiceResponse.ProtoReflect.Descriptor instead.
func (*CoreServiceResponse) Descriptor() ([]byte, []int) {
	return file_hcmcore_service_proto_rawDescGZIP(), []int{1}
}

func (x *CoreServiceResponse) GetCode() CoreServiceResponse_CoreServiceResponseCode {
	if x != nil {
		return x.Code
	}
	return CoreServiceResponse_C_NOERROR
}

func (x *CoreServiceResponse) GetGetterResponse() *GetterResponse {
	if x != nil {
		return x.GetterResponse
	}
	return nil
}

func (x *CoreServiceResponse) GetSetterResponse() *SetterResponse {
	if x != nil {
		return x.SetterResponse
	}
	return nil
}

type GetterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId        *int64                     `protobuf:"varint,1,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
	TargetUuid      *string                    `protobuf:"bytes,2,opt,name=targetUuid,proto3,oneof" json:"targetUuid,omitempty"`
	UserId          *string                    `protobuf:"bytes,3,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	TargetShiftType *SetterRequest_ShiftOpType `protobuf:"varint,4,opt,name=targetShiftType,proto3,enum=entities.SetterRequest_ShiftOpType,oneof" json:"targetShiftType,omitempty"`
}

func (x *GetterRequest) Reset() {
	*x = GetterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetterRequest) ProtoMessage() {}

func (x *GetterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetterRequest.ProtoReflect.Descriptor instead.
func (*GetterRequest) Descriptor() ([]byte, []int) {
	return file_hcmcore_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetterRequest) GetTargetId() int64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *GetterRequest) GetTargetUuid() string {
	if x != nil && x.TargetUuid != nil {
		return *x.TargetUuid
	}
	return ""
}

func (x *GetterRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *GetterRequest) GetTargetShiftType() SetterRequest_ShiftOpType {
	if x != nil && x.TargetShiftType != nil {
		return *x.TargetShiftType
	}
	return SetterRequest_T_SHIFT
}

type GetterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage        *string                    `protobuf:"bytes,1,opt,name=errorMessage,proto3,oneof" json:"errorMessage,omitempty"`
	TargetShiftType     *SetterRequest_ShiftOpType `protobuf:"varint,4,opt,name=targetShiftType,proto3,enum=entities.SetterRequest_ShiftOpType,oneof" json:"targetShiftType,omitempty"`
	WorkerResult        *Worker                    `protobuf:"bytes,5,opt,name=workerResult,proto3,oneof" json:"workerResult,omitempty"`
	OrganizationResult  *Organization              `protobuf:"bytes,6,opt,name=organizationResult,proto3,oneof" json:"organizationResult,omitempty"`
	RoleResult          *Role                      `protobuf:"bytes,7,opt,name=roleResult,proto3,oneof" json:"roleResult,omitempty"`
	TeamResult          *Team                      `protobuf:"bytes,8,opt,name=teamResult,proto3,oneof" json:"teamResult,omitempty"`
	IdentityCardResult  *WorkerIdentityCard        `protobuf:"bytes,9,opt,name=identityCardResult,proto3,oneof" json:"identityCardResult,omitempty"`
	MemberResult        *Member                    `protobuf:"bytes,10,opt,name=memberResult,proto3,oneof" json:"memberResult,omitempty"`
	CompensationResult  *Compensation              `protobuf:"bytes,11,opt,name=compensationResult,proto3,oneof" json:"compensationResult,omitempty"`
	AdditionResult      *Addition                  `protobuf:"bytes,12,opt,name=additionResult,proto3,oneof" json:"additionResult,omitempty"`
	DeductionResult     *Deduction                 `protobuf:"bytes,13,opt,name=deductionResult,proto3,oneof" json:"deductionResult,omitempty"`
	PayrollResult       *Payroll                   `protobuf:"bytes,14,opt,name=payrollResult,proto3,oneof" json:"payrollResult,omitempty"`
	AttendanceResult    *Attendance                `protobuf:"bytes,15,opt,name=attendanceResult,proto3,oneof" json:"attendanceResult,omitempty"`
	ShiftResult         *Shift                     `protobuf:"bytes,16,opt,name=shiftResult,proto3,oneof" json:"shiftResult,omitempty"`
	OverrideShiftResult *OverrideShift             `protobuf:"bytes,17,opt,name=overrideShiftResult,proto3,oneof" json:"overrideShiftResult,omitempty"`
}

func (x *GetterResponse) Reset() {
	*x = GetterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetterResponse) ProtoMessage() {}

func (x *GetterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetterResponse.ProtoReflect.Descriptor instead.
func (*GetterResponse) Descriptor() ([]byte, []int) {
	return file_hcmcore_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetterResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *GetterResponse) GetTargetShiftType() SetterRequest_ShiftOpType {
	if x != nil && x.TargetShiftType != nil {
		return *x.TargetShiftType
	}
	return SetterRequest_T_SHIFT
}

func (x *GetterResponse) GetWorkerResult() *Worker {
	if x != nil {
		return x.WorkerResult
	}
	return nil
}

func (x *GetterResponse) GetOrganizationResult() *Organization {
	if x != nil {
		return x.OrganizationResult
	}
	return nil
}

func (x *GetterResponse) GetRoleResult() *Role {
	if x != nil {
		return x.RoleResult
	}
	return nil
}

func (x *GetterResponse) GetTeamResult() *Team {
	if x != nil {
		return x.TeamResult
	}
	return nil
}

func (x *GetterResponse) GetIdentityCardResult() *WorkerIdentityCard {
	if x != nil {
		return x.IdentityCardResult
	}
	return nil
}

func (x *GetterResponse) GetMemberResult() *Member {
	if x != nil {
		return x.MemberResult
	}
	return nil
}

func (x *GetterResponse) GetCompensationResult() *Compensation {
	if x != nil {
		return x.CompensationResult
	}
	return nil
}

func (x *GetterResponse) GetAdditionResult() *Addition {
	if x != nil {
		return x.AdditionResult
	}
	return nil
}

func (x *GetterResponse) GetDeductionResult() *Deduction {
	if x != nil {
		return x.DeductionResult
	}
	return nil
}

func (x *GetterResponse) GetPayrollResult() *Payroll {
	if x != nil {
		return x.PayrollResult
	}
	return nil
}

func (x *GetterResponse) GetAttendanceResult() *Attendance {
	if x != nil {
		return x.AttendanceResult
	}
	return nil
}

func (x *GetterResponse) GetShiftResult() *Shift {
	if x != nil {
		return x.ShiftResult
	}
	return nil
}

func (x *GetterResponse) GetOverrideShiftResult() *OverrideShift {
	if x != nil {
		return x.OverrideShiftResult
	}
	return nil
}

type SetterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerTarget        *Worker                    `protobuf:"bytes,1,opt,name=workerTarget,proto3,oneof" json:"workerTarget,omitempty"`
	OrganizationTarget  *Organization              `protobuf:"bytes,2,opt,name=organizationTarget,proto3,oneof" json:"organizationTarget,omitempty"`
	RoleTarget          *Role                      `protobuf:"bytes,3,opt,name=roleTarget,proto3,oneof" json:"roleTarget,omitempty"`
	TeamTarget          *Team                      `protobuf:"bytes,4,opt,name=teamTarget,proto3,oneof" json:"teamTarget,omitempty"`
	TargetId            *int64                     `protobuf:"varint,5,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
	TargetUuid          *string                    `protobuf:"bytes,6,opt,name=targetUuid,proto3,oneof" json:"targetUuid,omitempty"`
	UserId              *string                    `protobuf:"bytes,7,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	SoftDeleteOp        *bool                      `protobuf:"varint,8,opt,name=softDeleteOp,proto3,oneof" json:"softDeleteOp,omitempty"`
	TargetShiftType     *SetterRequest_ShiftOpType `protobuf:"varint,9,opt,name=targetShiftType,proto3,enum=entities.SetterRequest_ShiftOpType,oneof" json:"targetShiftType,omitempty"`
	ShiftTarget         *Shift                     `protobuf:"bytes,10,opt,name=shiftTarget,proto3,oneof" json:"shiftTarget,omitempty"`
	OverrideShiftTarget *OverrideShift             `protobuf:"bytes,11,opt,name=overrideShiftTarget,proto3,oneof" json:"overrideShiftTarget,omitempty"`
	IdentityCardTarget  *WorkerIdentityCard        `protobuf:"bytes,12,opt,name=identityCardTarget,proto3,oneof" json:"identityCardTarget,omitempty"`
	MemberTarget        *Member                    `protobuf:"bytes,13,opt,name=memberTarget,proto3,oneof" json:"memberTarget,omitempty"`
	CompensationTarget  *Compensation              `protobuf:"bytes,14,opt,name=compensationTarget,proto3,oneof" json:"compensationTarget,omitempty"`
	AdditionTarget      *Addition                  `protobuf:"bytes,15,opt,name=additionTarget,proto3,oneof" json:"additionTarget,omitempty"`
	DeductionTarget     *Deduction                 `protobuf:"bytes,16,opt,name=deductionTarget,proto3,oneof" json:"deductionTarget,omitempty"`
	PayrollTarget       *Payroll                   `protobuf:"bytes,17,opt,name=payrollTarget,proto3,oneof" json:"payrollTarget,omitempty"`
	AttendanceTarget    *Attendance                `protobuf:"bytes,18,opt,name=attendanceTarget,proto3,oneof" json:"attendanceTarget,omitempty"`
}

func (x *SetterRequest) Reset() {
	*x = SetterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetterRequest) ProtoMessage() {}

func (x *SetterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetterRequest.ProtoReflect.Descriptor instead.
func (*SetterRequest) Descriptor() ([]byte, []int) {
	return file_hcmcore_service_proto_rawDescGZIP(), []int{4}
}

func (x *SetterRequest) GetWorkerTarget() *Worker {
	if x != nil {
		return x.WorkerTarget
	}
	return nil
}

func (x *SetterRequest) GetOrganizationTarget() *Organization {
	if x != nil {
		return x.OrganizationTarget
	}
	return nil
}

func (x *SetterRequest) GetRoleTarget() *Role {
	if x != nil {
		return x.RoleTarget
	}
	return nil
}

func (x *SetterRequest) GetTeamTarget() *Team {
	if x != nil {
		return x.TeamTarget
	}
	return nil
}

func (x *SetterRequest) GetTargetId() int64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *SetterRequest) GetTargetUuid() string {
	if x != nil && x.TargetUuid != nil {
		return *x.TargetUuid
	}
	return ""
}

func (x *SetterRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *SetterRequest) GetSoftDeleteOp() bool {
	if x != nil && x.SoftDeleteOp != nil {
		return *x.SoftDeleteOp
	}
	return false
}

func (x *SetterRequest) GetTargetShiftType() SetterRequest_ShiftOpType {
	if x != nil && x.TargetShiftType != nil {
		return *x.TargetShiftType
	}
	return SetterRequest_T_SHIFT
}

func (x *SetterRequest) GetShiftTarget() *Shift {
	if x != nil {
		return x.ShiftTarget
	}
	return nil
}

func (x *SetterRequest) GetOverrideShiftTarget() *OverrideShift {
	if x != nil {
		return x.OverrideShiftTarget
	}
	return nil
}

func (x *SetterRequest) GetIdentityCardTarget() *WorkerIdentityCard {
	if x != nil {
		return x.IdentityCardTarget
	}
	return nil
}

func (x *SetterRequest) GetMemberTarget() *Member {
	if x != nil {
		return x.MemberTarget
	}
	return nil
}

func (x *SetterRequest) GetCompensationTarget() *Compensation {
	if x != nil {
		return x.CompensationTarget
	}
	return nil
}

func (x *SetterRequest) GetAdditionTarget() *Addition {
	if x != nil {
		return x.AdditionTarget
	}
	return nil
}

func (x *SetterRequest) GetDeductionTarget() *Deduction {
	if x != nil {
		return x.DeductionTarget
	}
	return nil
}

func (x *SetterRequest) GetPayrollTarget() *Payroll {
	if x != nil {
		return x.PayrollTarget
	}
	return nil
}

func (x *SetterRequest) GetAttendanceTarget() *Attendance {
	if x != nil {
		return x.AttendanceTarget
	}
	return nil
}

type SetterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedWorkerTarget        *Worker                    `protobuf:"bytes,1,opt,name=updatedWorkerTarget,proto3,oneof" json:"updatedWorkerTarget,omitempty"`
	UpdatedOrganizationTarget  *Organization              `protobuf:"bytes,2,opt,name=updatedOrganizationTarget,proto3,oneof" json:"updatedOrganizationTarget,omitempty"`
	UpdatedRoleTarget          *Role                      `protobuf:"bytes,3,opt,name=updatedRoleTarget,proto3,oneof" json:"updatedRoleTarget,omitempty"`
	UpdatedTeamTarget          *Team                      `protobuf:"bytes,4,opt,name=updatedTeamTarget,proto3,oneof" json:"updatedTeamTarget,omitempty"`
	TargetId                   *int64                     `protobuf:"varint,5,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
	TargetUuid                 *string                    `protobuf:"bytes,6,opt,name=targetUuid,proto3,oneof" json:"targetUuid,omitempty"`
	UserId                     *string                    `protobuf:"bytes,7,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	ErrorMessage               *string                    `protobuf:"bytes,10,opt,name=errorMessage,proto3,oneof" json:"errorMessage,omitempty"`
	SoftDeleteOp               bool                       `protobuf:"varint,11,opt,name=softDeleteOp,proto3" json:"softDeleteOp,omitempty"`
	UpdatedIdentityCardTarget  *WorkerIdentityCard        `protobuf:"bytes,12,opt,name=updatedIdentityCardTarget,proto3,oneof" json:"updatedIdentityCardTarget,omitempty"`
	UpdatedMemberTarget        *Member                    `protobuf:"bytes,13,opt,name=updatedMemberTarget,proto3,oneof" json:"updatedMemberTarget,omitempty"`
	UpdatedCompensationTarget  *Compensation              `protobuf:"bytes,14,opt,name=updatedCompensationTarget,proto3,oneof" json:"updatedCompensationTarget,omitempty"`
	UpdatedAdditionTarget      *Addition                  `protobuf:"bytes,15,opt,name=updatedAdditionTarget,proto3,oneof" json:"updatedAdditionTarget,omitempty"`
	UpdatedDeductionTarget     *Deduction                 `protobuf:"bytes,16,opt,name=updatedDeductionTarget,proto3,oneof" json:"updatedDeductionTarget,omitempty"`
	UpdatedPayrollTarget       *Payroll                   `protobuf:"bytes,17,opt,name=updatedPayrollTarget,proto3,oneof" json:"updatedPayrollTarget,omitempty"`
	UpdatedAttendanceTarget    *Attendance                `protobuf:"bytes,18,opt,name=updatedAttendanceTarget,proto3,oneof" json:"updatedAttendanceTarget,omitempty"`
	UpdatedShiftTarget         *Shift                     `protobuf:"bytes,19,opt,name=updatedShiftTarget,proto3,oneof" json:"updatedShiftTarget,omitempty"`
	UpdatedOverrideShiftTarget *OverrideShift             `protobuf:"bytes,20,opt,name=updatedOverrideShiftTarget,proto3,oneof" json:"updatedOverrideShiftTarget,omitempty"`
	TargetShiftType            *SetterRequest_ShiftOpType `protobuf:"varint,21,opt,name=targetShiftType,proto3,enum=entities.SetterRequest_ShiftOpType,oneof" json:"targetShiftType,omitempty"`
}

func (x *SetterResponse) Reset() {
	*x = SetterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetterResponse) ProtoMessage() {}

func (x *SetterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetterResponse.ProtoReflect.Descriptor instead.
func (*SetterResponse) Descriptor() ([]byte, []int) {
	return file_hcmcore_service_proto_rawDescGZIP(), []int{5}
}

func (x *SetterResponse) GetUpdatedWorkerTarget() *Worker {
	if x != nil {
		return x.UpdatedWorkerTarget
	}
	return nil
}

func (x *SetterResponse) GetUpdatedOrganizationTarget() *Organization {
	if x != nil {
		return x.UpdatedOrganizationTarget
	}
	return nil
}

func (x *SetterResponse) GetUpdatedRoleTarget() *Role {
	if x != nil {
		return x.UpdatedRoleTarget
	}
	return nil
}

func (x *SetterResponse) GetUpdatedTeamTarget() *Team {
	if x != nil {
		return x.UpdatedTeamTarget
	}
	return nil
}

func (x *SetterResponse) GetTargetId() int64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *SetterResponse) GetTargetUuid() string {
	if x != nil && x.TargetUuid != nil {
		return *x.TargetUuid
	}
	return ""
}

func (x *SetterResponse) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *SetterResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *SetterResponse) GetSoftDeleteOp() bool {
	if x != nil {
		return x.SoftDeleteOp
	}
	return false
}

func (x *SetterResponse) GetUpdatedIdentityCardTarget() *WorkerIdentityCard {
	if x != nil {
		return x.UpdatedIdentityCardTarget
	}
	return nil
}

func (x *SetterResponse) GetUpdatedMemberTarget() *Member {
	if x != nil {
		return x.UpdatedMemberTarget
	}
	return nil
}

func (x *SetterResponse) GetUpdatedCompensationTarget() *Compensation {
	if x != nil {
		return x.UpdatedCompensationTarget
	}
	return nil
}

func (x *SetterResponse) GetUpdatedAdditionTarget() *Addition {
	if x != nil {
		return x.UpdatedAdditionTarget
	}
	return nil
}

func (x *SetterResponse) GetUpdatedDeductionTarget() *Deduction {
	if x != nil {
		return x.UpdatedDeductionTarget
	}
	return nil
}

func (x *SetterResponse) GetUpdatedPayrollTarget() *Payroll {
	if x != nil {
		return x.UpdatedPayrollTarget
	}
	return nil
}

func (x *SetterResponse) GetUpdatedAttendanceTarget() *Attendance {
	if x != nil {
		return x.UpdatedAttendanceTarget
	}
	return nil
}

func (x *SetterResponse) GetUpdatedShiftTarget() *Shift {
	if x != nil {
		return x.UpdatedShiftTarget
	}
	return nil
}

func (x *SetterResponse) GetUpdatedOverrideShiftTarget() *OverrideShift {
	if x != nil {
		return x.UpdatedOverrideShiftTarget
	}
	return nil
}

func (x *SetterResponse) GetTargetShiftType() SetterRequest_ShiftOpType {
	if x != nil && x.TargetShiftType != nil {
		return *x.TargetShiftType
	}
	return SetterRequest_T_SHIFT
}

var File_hcmcore_service_proto protoreflect.FileDescriptor

var file_hcmcore_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x68, 0x63, 0x6d, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x1a, 0x0d, 0x68, 0x63, 0x6d, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe7, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x73, 0x61,
	0x66, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x22, 0x2a, 0x0a, 0x18, 0x43, 0x6f,
	0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x5f, 0x53, 0x55, 0x50, 0x41,
	0x42, 0x41, 0x53, 0x45, 0x10, 0x00, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x67, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf9, 0x02, 0x0a, 0x13, 0x43,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a,
	0x0e, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x22, 0x63, 0x0a, 0x17, 0x43,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x5f, 0x4e, 0x4f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x5f, 0x44, 0x42, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0x03,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x0f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8c, 0x0a, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x4f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x48, 0x02, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x12, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x04, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x05, 0x52, 0x0a, 0x74,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x12,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x48, 0x06, 0x52, 0x12, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x07, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x08,
	0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0f, 0x64, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x0a, 0x52, 0x0f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d,
	0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50,
	0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x48, 0x0b, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x0c, 0x52, 0x10, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x48, 0x0d, 0x52, 0x0b, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x13, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x48,
	0x0e, 0x52, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70,
	0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc6, 0x0b, 0x0a, 0x0d, 0x53, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x12, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x03, 0x52, 0x0a,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x48, 0x08, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x0b, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x48, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x48, 0x0a, 0x52, 0x13, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x12, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x61, 0x72, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x48,
	0x0b, 0x52, 0x12, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x48, 0x0c, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x0e, 0x52, 0x0e,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x42, 0x0a, 0x0f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x0f, 0x52, 0x0f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x48,
	0x10, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x48, 0x11, 0x52, 0x10, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x22, 0x2f, 0x0a, 0x0b, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x5f, 0x53,
	0x48, 0x49, 0x46, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x52, 0x49, 0x44, 0x45, 0x53, 0x48, 0x49, 0x46, 0x54, 0x10, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x6f, 0x66,
	0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0xcb, 0x0d, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x59,
	0x0a, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x19, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x48, 0x02, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x11,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x03, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x12,
	0x5f, 0x0a, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x64,
	0x48, 0x08, 0x52, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x47, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48,
	0x09, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x19, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x0a, 0x52, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x0b, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x44,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x0c, 0x52, 0x16, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50,
	0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x48, 0x0d, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x53, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x0e, 0x52, 0x17, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x48, 0x0f, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x1a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x48, 0x10, 0x52, 0x1a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x48, 0x11, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x1c,
	0x0a, 0x1a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79,
	0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x1d, 0x0a,
	0x1b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x32, 0xfa, 0x18, 0x0a, 0x0b, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4c, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x13, 0x67, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x59, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x0b, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x67, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57,
	0x0a, 0x18, 0x67, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a,
	0x0a, 0x1b, 0x67, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x15, 0x67, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x51, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x44, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x67, 0x65, 0x74,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x16,
	0x73, 0x61, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x73, 0x61, 0x76, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x73, 0x61, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x08, 0x73, 0x61, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x73, 0x61, 0x76, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x44, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c,
	0x6c, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x0e, 0x73, 0x61, 0x76, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x09, 0x73, 0x61, 0x76, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x1c, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x43, 0x61, 0x72, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0e,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1d, 0x48,
	0x01, 0x5a, 0x19, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hcmcore_service_proto_rawDescOnce sync.Once
	file_hcmcore_service_proto_rawDescData = file_hcmcore_service_proto_rawDesc
)

func file_hcmcore_service_proto_rawDescGZIP() []byte {
	file_hcmcore_service_proto_rawDescOnce.Do(func() {
		file_hcmcore_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_hcmcore_service_proto_rawDescData)
	})
	return file_hcmcore_service_proto_rawDescData
}

var file_hcmcore_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_hcmcore_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_hcmcore_service_proto_goTypes = []interface{}{
	(CoreServiceRequest_CoreServiceRequestClient)(0), // 0: entities.CoreServiceRequest.CoreServiceRequestClient
	(CoreServiceResponse_CoreServiceResponseCode)(0), // 1: entities.CoreServiceResponse.CoreServiceResponseCode
	(SetterRequest_ShiftOpType)(0),                   // 2: entities.SetterRequest.ShiftOpType
	(*CoreServiceRequest)(nil),                       // 3: entities.CoreServiceRequest
	(*CoreServiceResponse)(nil),                      // 4: entities.CoreServiceResponse
	(*GetterRequest)(nil),                            // 5: entities.GetterRequest
	(*GetterResponse)(nil),                           // 6: entities.GetterResponse
	(*SetterRequest)(nil),                            // 7: entities.SetterRequest
	(*SetterResponse)(nil),                           // 8: entities.SetterResponse
	(*Worker)(nil),                                   // 9: entities.Worker
	(*Organization)(nil),                             // 10: entities.Organization
	(*Role)(nil),                                     // 11: entities.Role
	(*Team)(nil),                                     // 12: entities.Team
	(*WorkerIdentityCard)(nil),                       // 13: entities.WorkerIdentityCard
	(*Member)(nil),                                   // 14: entities.Member
	(*Compensation)(nil),                             // 15: entities.Compensation
	(*Addition)(nil),                                 // 16: entities.Addition
	(*Deduction)(nil),                                // 17: entities.Deduction
	(*Payroll)(nil),                                  // 18: entities.Payroll
	(*Attendance)(nil),                               // 19: entities.Attendance
	(*Shift)(nil),                                    // 20: entities.Shift
	(*OverrideShift)(nil),                            // 21: entities.OverrideShift
}
var file_hcmcore_service_proto_depIdxs = []int32{
	0,  // 0: entities.CoreServiceRequest.usedClient:type_name -> entities.CoreServiceRequest.CoreServiceRequestClient
	5,  // 1: entities.CoreServiceRequest.getterRequest:type_name -> entities.GetterRequest
	7,  // 2: entities.CoreServiceRequest.setterRequest:type_name -> entities.SetterRequest
	1,  // 3: entities.CoreServiceResponse.code:type_name -> entities.CoreServiceResponse.CoreServiceResponseCode
	6,  // 4: entities.CoreServiceResponse.getterResponse:type_name -> entities.GetterResponse
	8,  // 5: entities.CoreServiceResponse.setterResponse:type_name -> entities.SetterResponse
	2,  // 6: entities.GetterRequest.targetShiftType:type_name -> entities.SetterRequest.ShiftOpType
	2,  // 7: entities.GetterResponse.targetShiftType:type_name -> entities.SetterRequest.ShiftOpType
	9,  // 8: entities.GetterResponse.workerResult:type_name -> entities.Worker
	10, // 9: entities.GetterResponse.organizationResult:type_name -> entities.Organization
	11, // 10: entities.GetterResponse.roleResult:type_name -> entities.Role
	12, // 11: entities.GetterResponse.teamResult:type_name -> entities.Team
	13, // 12: entities.GetterResponse.identityCardResult:type_name -> entities.WorkerIdentityCard
	14, // 13: entities.GetterResponse.memberResult:type_name -> entities.Member
	15, // 14: entities.GetterResponse.compensationResult:type_name -> entities.Compensation
	16, // 15: entities.GetterResponse.additionResult:type_name -> entities.Addition
	17, // 16: entities.GetterResponse.deductionResult:type_name -> entities.Deduction
	18, // 17: entities.GetterResponse.payrollResult:type_name -> entities.Payroll
	19, // 18: entities.GetterResponse.attendanceResult:type_name -> entities.Attendance
	20, // 19: entities.GetterResponse.shiftResult:type_name -> entities.Shift
	21, // 20: entities.GetterResponse.overrideShiftResult:type_name -> entities.OverrideShift
	9,  // 21: entities.SetterRequest.workerTarget:type_name -> entities.Worker
	10, // 22: entities.SetterRequest.organizationTarget:type_name -> entities.Organization
	11, // 23: entities.SetterRequest.roleTarget:type_name -> entities.Role
	12, // 24: entities.SetterRequest.teamTarget:type_name -> entities.Team
	2,  // 25: entities.SetterRequest.targetShiftType:type_name -> entities.SetterRequest.ShiftOpType
	20, // 26: entities.SetterRequest.shiftTarget:type_name -> entities.Shift
	21, // 27: entities.SetterRequest.overrideShiftTarget:type_name -> entities.OverrideShift
	13, // 28: entities.SetterRequest.identityCardTarget:type_name -> entities.WorkerIdentityCard
	14, // 29: entities.SetterRequest.memberTarget:type_name -> entities.Member
	15, // 30: entities.SetterRequest.compensationTarget:type_name -> entities.Compensation
	16, // 31: entities.SetterRequest.additionTarget:type_name -> entities.Addition
	17, // 32: entities.SetterRequest.deductionTarget:type_name -> entities.Deduction
	18, // 33: entities.SetterRequest.payrollTarget:type_name -> entities.Payroll
	19, // 34: entities.SetterRequest.attendanceTarget:type_name -> entities.Attendance
	9,  // 35: entities.SetterResponse.updatedWorkerTarget:type_name -> entities.Worker
	10, // 36: entities.SetterResponse.updatedOrganizationTarget:type_name -> entities.Organization
	11, // 37: entities.SetterResponse.updatedRoleTarget:type_name -> entities.Role
	12, // 38: entities.SetterResponse.updatedTeamTarget:type_name -> entities.Team
	13, // 39: entities.SetterResponse.updatedIdentityCardTarget:type_name -> entities.WorkerIdentityCard
	14, // 40: entities.SetterResponse.updatedMemberTarget:type_name -> entities.Member
	15, // 41: entities.SetterResponse.updatedCompensationTarget:type_name -> entities.Compensation
	16, // 42: entities.SetterResponse.updatedAdditionTarget:type_name -> entities.Addition
	17, // 43: entities.SetterResponse.updatedDeductionTarget:type_name -> entities.Deduction
	18, // 44: entities.SetterResponse.updatedPayrollTarget:type_name -> entities.Payroll
	19, // 45: entities.SetterResponse.updatedAttendanceTarget:type_name -> entities.Attendance
	20, // 46: entities.SetterResponse.updatedShiftTarget:type_name -> entities.Shift
	21, // 47: entities.SetterResponse.updatedOverrideShiftTarget:type_name -> entities.OverrideShift
	2,  // 48: entities.SetterResponse.targetShiftType:type_name -> entities.SetterRequest.ShiftOpType
	3,  // 49: entities.CoreService.getWorkerById:input_type -> entities.CoreServiceRequest
	3,  // 50: entities.CoreService.getOrganizationById:input_type -> entities.CoreServiceRequest
	3,  // 51: entities.CoreService.getOrganizationByCreatorId:input_type -> entities.CoreServiceRequest
	3,  // 52: entities.CoreService.getRoleById:input_type -> entities.CoreServiceRequest
	3,  // 53: entities.CoreService.getTeamById:input_type -> entities.CoreServiceRequest
	3,  // 54: entities.CoreService.getRolesFromOrganization:input_type -> entities.CoreServiceRequest
	3,  // 55: entities.CoreService.getTeamsFromOrganization:input_type -> entities.CoreServiceRequest
	3,  // 56: entities.CoreService.getOrganizationMembers:input_type -> entities.CoreServiceRequest
	3,  // 57: entities.CoreService.getOrganizationJoinRequests:input_type -> entities.CoreServiceRequest
	3,  // 58: entities.CoreService.getWorkerJoinRequests:input_type -> entities.CoreServiceRequest
	3,  // 59: entities.CoreService.getJoinRequestById:input_type -> entities.CoreServiceRequest
	3,  // 60: entities.CoreService.getCompensationById:input_type -> entities.CoreServiceRequest
	3,  // 61: entities.CoreService.getAdditionById:input_type -> entities.CoreServiceRequest
	3,  // 62: entities.CoreService.getDeductionById:input_type -> entities.CoreServiceRequest
	3,  // 63: entities.CoreService.getPayrollById:input_type -> entities.CoreServiceRequest
	3,  // 64: entities.CoreService.getAttendanceById:input_type -> entities.CoreServiceRequest
	3,  // 65: entities.CoreService.getShiftById:input_type -> entities.CoreServiceRequest
	3,  // 66: entities.CoreService.saveWorker:input_type -> entities.CoreServiceRequest
	3,  // 67: entities.CoreService.saveMember:input_type -> entities.CoreServiceRequest
	3,  // 68: entities.CoreService.saveWorkerIdentityCard:input_type -> entities.CoreServiceRequest
	3,  // 69: entities.CoreService.saveOrganization:input_type -> entities.CoreServiceRequest
	3,  // 70: entities.CoreService.saveRole:input_type -> entities.CoreServiceRequest
	3,  // 71: entities.CoreService.saveTeam:input_type -> entities.CoreServiceRequest
	3,  // 72: entities.CoreService.saveCompensation:input_type -> entities.CoreServiceRequest
	3,  // 73: entities.CoreService.saveAddition:input_type -> entities.CoreServiceRequest
	3,  // 74: entities.CoreService.saveDeduction:input_type -> entities.CoreServiceRequest
	3,  // 75: entities.CoreService.savePayroll:input_type -> entities.CoreServiceRequest
	3,  // 76: entities.CoreService.saveAttendance:input_type -> entities.CoreServiceRequest
	3,  // 77: entities.CoreService.saveShift:input_type -> entities.CoreServiceRequest
	3,  // 78: entities.CoreService.deleteWorkerById:input_type -> entities.CoreServiceRequest
	3,  // 79: entities.CoreService.deleteWorkerIdentityCardById:input_type -> entities.CoreServiceRequest
	3,  // 80: entities.CoreService.deleteOrganizationById:input_type -> entities.CoreServiceRequest
	3,  // 81: entities.CoreService.deleteRoleById:input_type -> entities.CoreServiceRequest
	3,  // 82: entities.CoreService.deleteTeamById:input_type -> entities.CoreServiceRequest
	3,  // 83: entities.CoreService.deleteCompensationById:input_type -> entities.CoreServiceRequest
	3,  // 84: entities.CoreService.deleteAdditionById:input_type -> entities.CoreServiceRequest
	3,  // 85: entities.CoreService.deleteDeductionById:input_type -> entities.CoreServiceRequest
	3,  // 86: entities.CoreService.deleteAttendanceById:input_type -> entities.CoreServiceRequest
	3,  // 87: entities.CoreService.deleteShiftById:input_type -> entities.CoreServiceRequest
	4,  // 88: entities.CoreService.getWorkerById:output_type -> entities.CoreServiceResponse
	4,  // 89: entities.CoreService.getOrganizationById:output_type -> entities.CoreServiceResponse
	4,  // 90: entities.CoreService.getOrganizationByCreatorId:output_type -> entities.CoreServiceResponse
	4,  // 91: entities.CoreService.getRoleById:output_type -> entities.CoreServiceResponse
	4,  // 92: entities.CoreService.getTeamById:output_type -> entities.CoreServiceResponse
	4,  // 93: entities.CoreService.getRolesFromOrganization:output_type -> entities.CoreServiceResponse
	4,  // 94: entities.CoreService.getTeamsFromOrganization:output_type -> entities.CoreServiceResponse
	4,  // 95: entities.CoreService.getOrganizationMembers:output_type -> entities.CoreServiceResponse
	4,  // 96: entities.CoreService.getOrganizationJoinRequests:output_type -> entities.CoreServiceResponse
	4,  // 97: entities.CoreService.getWorkerJoinRequests:output_type -> entities.CoreServiceResponse
	4,  // 98: entities.CoreService.getJoinRequestById:output_type -> entities.CoreServiceResponse
	4,  // 99: entities.CoreService.getCompensationById:output_type -> entities.CoreServiceResponse
	4,  // 100: entities.CoreService.getAdditionById:output_type -> entities.CoreServiceResponse
	4,  // 101: entities.CoreService.getDeductionById:output_type -> entities.CoreServiceResponse
	4,  // 102: entities.CoreService.getPayrollById:output_type -> entities.CoreServiceResponse
	4,  // 103: entities.CoreService.getAttendanceById:output_type -> entities.CoreServiceResponse
	4,  // 104: entities.CoreService.getShiftById:output_type -> entities.CoreServiceResponse
	4,  // 105: entities.CoreService.saveWorker:output_type -> entities.CoreServiceResponse
	4,  // 106: entities.CoreService.saveMember:output_type -> entities.CoreServiceResponse
	4,  // 107: entities.CoreService.saveWorkerIdentityCard:output_type -> entities.CoreServiceResponse
	4,  // 108: entities.CoreService.saveOrganization:output_type -> entities.CoreServiceResponse
	4,  // 109: entities.CoreService.saveRole:output_type -> entities.CoreServiceResponse
	4,  // 110: entities.CoreService.saveTeam:output_type -> entities.CoreServiceResponse
	4,  // 111: entities.CoreService.saveCompensation:output_type -> entities.CoreServiceResponse
	4,  // 112: entities.CoreService.saveAddition:output_type -> entities.CoreServiceResponse
	4,  // 113: entities.CoreService.saveDeduction:output_type -> entities.CoreServiceResponse
	4,  // 114: entities.CoreService.savePayroll:output_type -> entities.CoreServiceResponse
	4,  // 115: entities.CoreService.saveAttendance:output_type -> entities.CoreServiceResponse
	4,  // 116: entities.CoreService.saveShift:output_type -> entities.CoreServiceResponse
	4,  // 117: entities.CoreService.deleteWorkerById:output_type -> entities.CoreServiceResponse
	4,  // 118: entities.CoreService.deleteWorkerIdentityCardById:output_type -> entities.CoreServiceResponse
	4,  // 119: entities.CoreService.deleteOrganizationById:output_type -> entities.CoreServiceResponse
	4,  // 120: entities.CoreService.deleteRoleById:output_type -> entities.CoreServiceResponse
	4,  // 121: entities.CoreService.deleteTeamById:output_type -> entities.CoreServiceResponse
	4,  // 122: entities.CoreService.deleteCompensationById:output_type -> entities.CoreServiceResponse
	4,  // 123: entities.CoreService.deleteAdditionById:output_type -> entities.CoreServiceResponse
	4,  // 124: entities.CoreService.deleteDeductionById:output_type -> entities.CoreServiceResponse
	4,  // 125: entities.CoreService.deleteAttendanceById:output_type -> entities.CoreServiceResponse
	4,  // 126: entities.CoreService.deleteShiftById:output_type -> entities.CoreServiceResponse
	88, // [88:127] is the sub-list for method output_type
	49, // [49:88] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_hcmcore_service_proto_init() }
func file_hcmcore_service_proto_init() {
	if File_hcmcore_service_proto != nil {
		return
	}
	file_hcmcore_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_hcmcore_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hcmcore_service_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_hcmcore_service_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_hcmcore_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_hcmcore_service_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_hcmcore_service_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_hcmcore_service_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hcmcore_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hcmcore_service_proto_goTypes,
		DependencyIndexes: file_hcmcore_service_proto_depIdxs,
		EnumInfos:         file_hcmcore_service_proto_enumTypes,
		MessageInfos:      file_hcmcore_service_proto_msgTypes,
	}.Build()
	File_hcmcore_service_proto = out.File
	file_hcmcore_service_proto_rawDesc = nil
	file_hcmcore_service_proto_goTypes = nil
	file_hcmcore_service_proto_depIdxs = nil
}
