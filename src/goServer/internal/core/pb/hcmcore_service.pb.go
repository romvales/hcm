// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: hcmcore_service.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CoreServiceRequest_CoreServiceRequestClient int32

const (
	CoreServiceRequest_C_SUPABASE CoreServiceRequest_CoreServiceRequestClient = 0
)

// Enum value maps for CoreServiceRequest_CoreServiceRequestClient.
var (
	CoreServiceRequest_CoreServiceRequestClient_name = map[int32]string{
		0: "C_SUPABASE",
	}
	CoreServiceRequest_CoreServiceRequestClient_value = map[string]int32{
		"C_SUPABASE": 0,
	}
)

func (x CoreServiceRequest_CoreServiceRequestClient) Enum() *CoreServiceRequest_CoreServiceRequestClient {
	p := new(CoreServiceRequest_CoreServiceRequestClient)
	*p = x
	return p
}

func (x CoreServiceRequest_CoreServiceRequestClient) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoreServiceRequest_CoreServiceRequestClient) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_service_proto_enumTypes[0].Descriptor()
}

func (CoreServiceRequest_CoreServiceRequestClient) Type() protoreflect.EnumType {
	return &file_hcmcore_service_proto_enumTypes[0]
}

func (x CoreServiceRequest_CoreServiceRequestClient) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoreServiceRequest_CoreServiceRequestClient.Descriptor instead.
func (CoreServiceRequest_CoreServiceRequestClient) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_service_proto_rawDescGZIP(), []int{0, 0}
}

type CoreServiceResponse_CoreServiceResponseCode int32

const (
	CoreServiceResponse_C_NOERROR     CoreServiceResponse_CoreServiceResponseCode = 0
	CoreServiceResponse_C_DBERROR     CoreServiceResponse_CoreServiceResponseCode = 1
	CoreServiceResponse_C_CLIENTERROR CoreServiceResponse_CoreServiceResponseCode = 2
)

// Enum value maps for CoreServiceResponse_CoreServiceResponseCode.
var (
	CoreServiceResponse_CoreServiceResponseCode_name = map[int32]string{
		0: "C_NOERROR",
		1: "C_DBERROR",
		2: "C_CLIENTERROR",
	}
	CoreServiceResponse_CoreServiceResponseCode_value = map[string]int32{
		"C_NOERROR":     0,
		"C_DBERROR":     1,
		"C_CLIENTERROR": 2,
	}
)

func (x CoreServiceResponse_CoreServiceResponseCode) Enum() *CoreServiceResponse_CoreServiceResponseCode {
	p := new(CoreServiceResponse_CoreServiceResponseCode)
	*p = x
	return p
}

func (x CoreServiceResponse_CoreServiceResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoreServiceResponse_CoreServiceResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_service_proto_enumTypes[1].Descriptor()
}

func (CoreServiceResponse_CoreServiceResponseCode) Type() protoreflect.EnumType {
	return &file_hcmcore_service_proto_enumTypes[1]
}

func (x CoreServiceResponse_CoreServiceResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoreServiceResponse_CoreServiceResponseCode.Descriptor instead.
func (CoreServiceResponse_CoreServiceResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_service_proto_rawDescGZIP(), []int{1, 0}
}

type CoreServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsedClient    CoreServiceRequest_CoreServiceRequestClient `protobuf:"varint,1,opt,name=usedClient,proto3,enum=entities.CoreServiceRequest_CoreServiceRequestClient" json:"usedClient,omitempty"`
	ClientUnsafe  bool                                        `protobuf:"varint,2,opt,name=clientUnsafe,proto3" json:"clientUnsafe,omitempty"`
	GetterRequest *GetterRequest                              `protobuf:"bytes,3,opt,name=getterRequest,proto3,oneof" json:"getterRequest,omitempty"`
	SetterRequest *SetterRequest                              `protobuf:"bytes,4,opt,name=setterRequest,proto3,oneof" json:"setterRequest,omitempty"`
}

func (x *CoreServiceRequest) Reset() {
	*x = CoreServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreServiceRequest) ProtoMessage() {}

func (x *CoreServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreServiceRequest.ProtoReflect.Descriptor instead.
func (*CoreServiceRequest) Descriptor() ([]byte, []int) {
	return file_hcmcore_service_proto_rawDescGZIP(), []int{0}
}

func (x *CoreServiceRequest) GetUsedClient() CoreServiceRequest_CoreServiceRequestClient {
	if x != nil {
		return x.UsedClient
	}
	return CoreServiceRequest_C_SUPABASE
}

func (x *CoreServiceRequest) GetClientUnsafe() bool {
	if x != nil {
		return x.ClientUnsafe
	}
	return false
}

func (x *CoreServiceRequest) GetGetterRequest() *GetterRequest {
	if x != nil {
		return x.GetterRequest
	}
	return nil
}

func (x *CoreServiceRequest) GetSetterRequest() *SetterRequest {
	if x != nil {
		return x.SetterRequest
	}
	return nil
}

type CoreServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           CoreServiceResponse_CoreServiceResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=entities.CoreServiceResponse_CoreServiceResponseCode" json:"code,omitempty"`
	GetterResponse *GetterResponse                             `protobuf:"bytes,2,opt,name=getterResponse,proto3,oneof" json:"getterResponse,omitempty"`
	SetterResponse *SetterResponse                             `protobuf:"bytes,3,opt,name=setterResponse,proto3,oneof" json:"setterResponse,omitempty"`
}

func (x *CoreServiceResponse) Reset() {
	*x = CoreServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreServiceResponse) ProtoMessage() {}

func (x *CoreServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreServiceResponse.ProtoReflect.Descriptor instead.
func (*CoreServiceResponse) Descriptor() ([]byte, []int) {
	return file_hcmcore_service_proto_rawDescGZIP(), []int{1}
}

func (x *CoreServiceResponse) GetCode() CoreServiceResponse_CoreServiceResponseCode {
	if x != nil {
		return x.Code
	}
	return CoreServiceResponse_C_NOERROR
}

func (x *CoreServiceResponse) GetGetterResponse() *GetterResponse {
	if x != nil {
		return x.GetterResponse
	}
	return nil
}

func (x *CoreServiceResponse) GetSetterResponse() *SetterResponse {
	if x != nil {
		return x.SetterResponse
	}
	return nil
}

type GetterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId   *int64  `protobuf:"varint,1,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
	TargetUuid *string `protobuf:"bytes,2,opt,name=targetUuid,proto3,oneof" json:"targetUuid,omitempty"`
	UserId     *string `protobuf:"bytes,3,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
}

func (x *GetterRequest) Reset() {
	*x = GetterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetterRequest) ProtoMessage() {}

func (x *GetterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetterRequest.ProtoReflect.Descriptor instead.
func (*GetterRequest) Descriptor() ([]byte, []int) {
	return file_hcmcore_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetterRequest) GetTargetId() int64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *GetterRequest) GetTargetUuid() string {
	if x != nil && x.TargetUuid != nil {
		return *x.TargetUuid
	}
	return ""
}

func (x *GetterRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type GetterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage *string `protobuf:"bytes,10,opt,name=errorMessage,proto3,oneof" json:"errorMessage,omitempty"`
}

func (x *GetterResponse) Reset() {
	*x = GetterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetterResponse) ProtoMessage() {}

func (x *GetterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetterResponse.ProtoReflect.Descriptor instead.
func (*GetterResponse) Descriptor() ([]byte, []int) {
	return file_hcmcore_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetterResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type SetterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerTarget       *Worker       `protobuf:"bytes,1,opt,name=workerTarget,proto3,oneof" json:"workerTarget,omitempty"`
	OrganizationTarget *Organization `protobuf:"bytes,2,opt,name=organizationTarget,proto3,oneof" json:"organizationTarget,omitempty"`
	RoleTarget         *Role         `protobuf:"bytes,3,opt,name=roleTarget,proto3,oneof" json:"roleTarget,omitempty"`
	TeamTarget         *Team         `protobuf:"bytes,4,opt,name=teamTarget,proto3,oneof" json:"teamTarget,omitempty"`
}

func (x *SetterRequest) Reset() {
	*x = SetterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetterRequest) ProtoMessage() {}

func (x *SetterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetterRequest.ProtoReflect.Descriptor instead.
func (*SetterRequest) Descriptor() ([]byte, []int) {
	return file_hcmcore_service_proto_rawDescGZIP(), []int{4}
}

func (x *SetterRequest) GetWorkerTarget() *Worker {
	if x != nil {
		return x.WorkerTarget
	}
	return nil
}

func (x *SetterRequest) GetOrganizationTarget() *Organization {
	if x != nil {
		return x.OrganizationTarget
	}
	return nil
}

func (x *SetterRequest) GetRoleTarget() *Role {
	if x != nil {
		return x.RoleTarget
	}
	return nil
}

func (x *SetterRequest) GetTeamTarget() *Team {
	if x != nil {
		return x.TeamTarget
	}
	return nil
}

type SetterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedWorkerTarget       *Worker       `protobuf:"bytes,1,opt,name=updatedWorkerTarget,proto3,oneof" json:"updatedWorkerTarget,omitempty"`
	UpdatedOrganizationTarget *Organization `protobuf:"bytes,2,opt,name=updatedOrganizationTarget,proto3,oneof" json:"updatedOrganizationTarget,omitempty"`
	UpdatedRoleTarget         *Role         `protobuf:"bytes,3,opt,name=updatedRoleTarget,proto3,oneof" json:"updatedRoleTarget,omitempty"`
	UpdatedTeamTarget         *Team         `protobuf:"bytes,4,opt,name=updatedTeamTarget,proto3,oneof" json:"updatedTeamTarget,omitempty"`
	TargetId                  *int64        `protobuf:"varint,5,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
	TargetUuid                *string       `protobuf:"bytes,6,opt,name=targetUuid,proto3,oneof" json:"targetUuid,omitempty"`
	UserId                    *string       `protobuf:"bytes,7,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	ErrorMessage              *string       `protobuf:"bytes,10,opt,name=errorMessage,proto3,oneof" json:"errorMessage,omitempty"`
}

func (x *SetterResponse) Reset() {
	*x = SetterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetterResponse) ProtoMessage() {}

func (x *SetterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetterResponse.ProtoReflect.Descriptor instead.
func (*SetterResponse) Descriptor() ([]byte, []int) {
	return file_hcmcore_service_proto_rawDescGZIP(), []int{5}
}

func (x *SetterResponse) GetUpdatedWorkerTarget() *Worker {
	if x != nil {
		return x.UpdatedWorkerTarget
	}
	return nil
}

func (x *SetterResponse) GetUpdatedOrganizationTarget() *Organization {
	if x != nil {
		return x.UpdatedOrganizationTarget
	}
	return nil
}

func (x *SetterResponse) GetUpdatedRoleTarget() *Role {
	if x != nil {
		return x.UpdatedRoleTarget
	}
	return nil
}

func (x *SetterResponse) GetUpdatedTeamTarget() *Team {
	if x != nil {
		return x.UpdatedTeamTarget
	}
	return nil
}

func (x *SetterResponse) GetTargetId() int64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *SetterResponse) GetTargetUuid() string {
	if x != nil && x.TargetUuid != nil {
		return *x.TargetUuid
	}
	return ""
}

func (x *SetterResponse) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *SetterResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

var File_hcmcore_service_proto protoreflect.FileDescriptor

var file_hcmcore_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x68, 0x63, 0x6d, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x1a, 0x0d, 0x68, 0x63, 0x6d, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe7, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x73, 0x61,
	0x66, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x22, 0x2a, 0x0a, 0x18, 0x43, 0x6f,
	0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x5f, 0x53, 0x55, 0x50, 0x41,
	0x42, 0x41, 0x53, 0x45, 0x10, 0x00, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x67, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe0, 0x02, 0x0a, 0x13, 0x43,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a,
	0x0e, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x22, 0x4a, 0x0a, 0x17, 0x43,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x5f, 0x4e, 0x4f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x5f, 0x44, 0x42, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99, 0x01,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x12, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22,
	0xe0, 0x04, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x19, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x48, 0x02, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x48, 0x03, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x61, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04,
	0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x75, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x99, 0x0e, 0x0a, 0x0b, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x67,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x67, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5a, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x15,
	0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x67, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x67, 0x65, 0x74,
	0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x73, 0x61,
	0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x73, 0x61, 0x76, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x73, 0x61, 0x76, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x08, 0x73, 0x61, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1d,
	0x48, 0x01, 0x5a, 0x19, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hcmcore_service_proto_rawDescOnce sync.Once
	file_hcmcore_service_proto_rawDescData = file_hcmcore_service_proto_rawDesc
)

func file_hcmcore_service_proto_rawDescGZIP() []byte {
	file_hcmcore_service_proto_rawDescOnce.Do(func() {
		file_hcmcore_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_hcmcore_service_proto_rawDescData)
	})
	return file_hcmcore_service_proto_rawDescData
}

var file_hcmcore_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_hcmcore_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_hcmcore_service_proto_goTypes = []interface{}{
	(CoreServiceRequest_CoreServiceRequestClient)(0), // 0: entities.CoreServiceRequest.CoreServiceRequestClient
	(CoreServiceResponse_CoreServiceResponseCode)(0), // 1: entities.CoreServiceResponse.CoreServiceResponseCode
	(*CoreServiceRequest)(nil),                       // 2: entities.CoreServiceRequest
	(*CoreServiceResponse)(nil),                      // 3: entities.CoreServiceResponse
	(*GetterRequest)(nil),                            // 4: entities.GetterRequest
	(*GetterResponse)(nil),                           // 5: entities.GetterResponse
	(*SetterRequest)(nil),                            // 6: entities.SetterRequest
	(*SetterResponse)(nil),                           // 7: entities.SetterResponse
	(*Worker)(nil),                                   // 8: entities.Worker
	(*Organization)(nil),                             // 9: entities.Organization
	(*Role)(nil),                                     // 10: entities.Role
	(*Team)(nil),                                     // 11: entities.Team
}
var file_hcmcore_service_proto_depIdxs = []int32{
	0,  // 0: entities.CoreServiceRequest.usedClient:type_name -> entities.CoreServiceRequest.CoreServiceRequestClient
	4,  // 1: entities.CoreServiceRequest.getterRequest:type_name -> entities.GetterRequest
	6,  // 2: entities.CoreServiceRequest.setterRequest:type_name -> entities.SetterRequest
	1,  // 3: entities.CoreServiceResponse.code:type_name -> entities.CoreServiceResponse.CoreServiceResponseCode
	5,  // 4: entities.CoreServiceResponse.getterResponse:type_name -> entities.GetterResponse
	7,  // 5: entities.CoreServiceResponse.setterResponse:type_name -> entities.SetterResponse
	8,  // 6: entities.SetterRequest.workerTarget:type_name -> entities.Worker
	9,  // 7: entities.SetterRequest.organizationTarget:type_name -> entities.Organization
	10, // 8: entities.SetterRequest.roleTarget:type_name -> entities.Role
	11, // 9: entities.SetterRequest.teamTarget:type_name -> entities.Team
	8,  // 10: entities.SetterResponse.updatedWorkerTarget:type_name -> entities.Worker
	9,  // 11: entities.SetterResponse.updatedOrganizationTarget:type_name -> entities.Organization
	10, // 12: entities.SetterResponse.updatedRoleTarget:type_name -> entities.Role
	11, // 13: entities.SetterResponse.updatedTeamTarget:type_name -> entities.Team
	2,  // 14: entities.CoreService.getWorkerById:input_type -> entities.CoreServiceRequest
	2,  // 15: entities.CoreService.getOrganizationById:input_type -> entities.CoreServiceRequest
	2,  // 16: entities.CoreService.getOrganizationByCreatorId:input_type -> entities.CoreServiceRequest
	2,  // 17: entities.CoreService.getRoleById:input_type -> entities.CoreServiceRequest
	2,  // 18: entities.CoreService.getTeamById:input_type -> entities.CoreServiceRequest
	2,  // 19: entities.CoreService.getRolesFromOrganization:input_type -> entities.CoreServiceRequest
	2,  // 20: entities.CoreService.getTeamsFromOrganization:input_type -> entities.CoreServiceRequest
	2,  // 21: entities.CoreService.getOrganizationMembers:input_type -> entities.CoreServiceRequest
	2,  // 22: entities.CoreService.getOrganizationJoinRequests:input_type -> entities.CoreServiceRequest
	2,  // 23: entities.CoreService.getWorkerJoinRequests:input_type -> entities.CoreServiceRequest
	2,  // 24: entities.CoreService.getJoinRequestById:input_type -> entities.CoreServiceRequest
	2,  // 25: entities.CoreService.getCompensationById:input_type -> entities.CoreServiceRequest
	2,  // 26: entities.CoreService.getAdditionById:input_type -> entities.CoreServiceRequest
	2,  // 27: entities.CoreService.getDeductionById:input_type -> entities.CoreServiceRequest
	2,  // 28: entities.CoreService.saveWorker:input_type -> entities.CoreServiceRequest
	2,  // 29: entities.CoreService.saveOrganization:input_type -> entities.CoreServiceRequest
	2,  // 30: entities.CoreService.saveRole:input_type -> entities.CoreServiceRequest
	2,  // 31: entities.CoreService.saveTeam:input_type -> entities.CoreServiceRequest
	2,  // 32: entities.CoreService.deleteWorkerById:input_type -> entities.CoreServiceRequest
	2,  // 33: entities.CoreService.deleteOrganizationById:input_type -> entities.CoreServiceRequest
	2,  // 34: entities.CoreService.deleteRoleById:input_type -> entities.CoreServiceRequest
	2,  // 35: entities.CoreService.deleteTeamById:input_type -> entities.CoreServiceRequest
	3,  // 36: entities.CoreService.getWorkerById:output_type -> entities.CoreServiceResponse
	3,  // 37: entities.CoreService.getOrganizationById:output_type -> entities.CoreServiceResponse
	3,  // 38: entities.CoreService.getOrganizationByCreatorId:output_type -> entities.CoreServiceResponse
	3,  // 39: entities.CoreService.getRoleById:output_type -> entities.CoreServiceResponse
	3,  // 40: entities.CoreService.getTeamById:output_type -> entities.CoreServiceResponse
	3,  // 41: entities.CoreService.getRolesFromOrganization:output_type -> entities.CoreServiceResponse
	3,  // 42: entities.CoreService.getTeamsFromOrganization:output_type -> entities.CoreServiceResponse
	3,  // 43: entities.CoreService.getOrganizationMembers:output_type -> entities.CoreServiceResponse
	3,  // 44: entities.CoreService.getOrganizationJoinRequests:output_type -> entities.CoreServiceResponse
	3,  // 45: entities.CoreService.getWorkerJoinRequests:output_type -> entities.CoreServiceResponse
	3,  // 46: entities.CoreService.getJoinRequestById:output_type -> entities.CoreServiceResponse
	3,  // 47: entities.CoreService.getCompensationById:output_type -> entities.CoreServiceResponse
	3,  // 48: entities.CoreService.getAdditionById:output_type -> entities.CoreServiceResponse
	3,  // 49: entities.CoreService.getDeductionById:output_type -> entities.CoreServiceResponse
	3,  // 50: entities.CoreService.saveWorker:output_type -> entities.CoreServiceResponse
	3,  // 51: entities.CoreService.saveOrganization:output_type -> entities.CoreServiceResponse
	3,  // 52: entities.CoreService.saveRole:output_type -> entities.CoreServiceResponse
	3,  // 53: entities.CoreService.saveTeam:output_type -> entities.CoreServiceResponse
	3,  // 54: entities.CoreService.deleteWorkerById:output_type -> entities.CoreServiceResponse
	3,  // 55: entities.CoreService.deleteOrganizationById:output_type -> entities.CoreServiceResponse
	3,  // 56: entities.CoreService.deleteRoleById:output_type -> entities.CoreServiceResponse
	3,  // 57: entities.CoreService.deleteTeamById:output_type -> entities.CoreServiceResponse
	36, // [36:58] is the sub-list for method output_type
	14, // [14:36] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_hcmcore_service_proto_init() }
func file_hcmcore_service_proto_init() {
	if File_hcmcore_service_proto != nil {
		return
	}
	file_hcmcore_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_hcmcore_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hcmcore_service_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_hcmcore_service_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_hcmcore_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_hcmcore_service_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_hcmcore_service_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_hcmcore_service_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hcmcore_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hcmcore_service_proto_goTypes,
		DependencyIndexes: file_hcmcore_service_proto_depIdxs,
		EnumInfos:         file_hcmcore_service_proto_enumTypes,
		MessageInfos:      file_hcmcore_service_proto_msgTypes,
	}.Build()
	File_hcmcore_service_proto = out.File
	file_hcmcore_service_proto_rawDesc = nil
	file_hcmcore_service_proto_goTypes = nil
	file_hcmcore_service_proto_depIdxs = nil
}
