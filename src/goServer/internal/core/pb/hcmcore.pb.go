// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: hcmcore.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShiftDay int32

const (
	ShiftDay_MON ShiftDay = 0
	ShiftDay_TUE ShiftDay = 1
	ShiftDay_WED ShiftDay = 2
	ShiftDay_THU ShiftDay = 3
	ShiftDay_FRI ShiftDay = 4
	ShiftDay_SAT ShiftDay = 5
	ShiftDay_SUN ShiftDay = 6
)

// Enum value maps for ShiftDay.
var (
	ShiftDay_name = map[int32]string{
		0: "MON",
		1: "TUE",
		2: "WED",
		3: "THU",
		4: "FRI",
		5: "SAT",
		6: "SUN",
	}
	ShiftDay_value = map[string]int32{
		"MON": 0,
		"TUE": 1,
		"WED": 2,
		"THU": 3,
		"FRI": 4,
		"SAT": 5,
		"SUN": 6,
	}
)

func (x ShiftDay) Enum() *ShiftDay {
	p := new(ShiftDay)
	*p = x
	return p
}

func (x ShiftDay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShiftDay) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_proto_enumTypes[0].Descriptor()
}

func (ShiftDay) Type() protoreflect.EnumType {
	return &file_hcmcore_proto_enumTypes[0]
}

func (x ShiftDay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShiftDay.Descriptor instead.
func (ShiftDay) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{0}
}

type Worker_Flag int32

const (
	Worker_UNKNOWN  Worker_Flag = 0
	Worker_G_MALE   Worker_Flag = 1
	Worker_G_FEMALE Worker_Flag = 2
	Worker_G_OTHER  Worker_Flag = 4
)

// Enum value maps for Worker_Flag.
var (
	Worker_Flag_name = map[int32]string{
		0: "UNKNOWN",
		1: "G_MALE",
		2: "G_FEMALE",
		4: "G_OTHER",
	}
	Worker_Flag_value = map[string]int32{
		"UNKNOWN":  0,
		"G_MALE":   1,
		"G_FEMALE": 2,
		"G_OTHER":  4,
	}
)

func (x Worker_Flag) Enum() *Worker_Flag {
	p := new(Worker_Flag)
	*p = x
	return p
}

func (x Worker_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Worker_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_proto_enumTypes[1].Descriptor()
}

func (Worker_Flag) Type() protoreflect.EnumType {
	return &file_hcmcore_proto_enumTypes[1]
}

func (x Worker_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Worker_Flag.Descriptor instead.
func (Worker_Flag) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{0, 0}
}

type WorkerIdentityCard_Flag int32

const (
	WorkerIdentityCard_UNKNOWN WorkerIdentityCard_Flag = 0
)

// Enum value maps for WorkerIdentityCard_Flag.
var (
	WorkerIdentityCard_Flag_name = map[int32]string{
		0: "UNKNOWN",
	}
	WorkerIdentityCard_Flag_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x WorkerIdentityCard_Flag) Enum() *WorkerIdentityCard_Flag {
	p := new(WorkerIdentityCard_Flag)
	*p = x
	return p
}

func (x WorkerIdentityCard_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkerIdentityCard_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_proto_enumTypes[2].Descriptor()
}

func (WorkerIdentityCard_Flag) Type() protoreflect.EnumType {
	return &file_hcmcore_proto_enumTypes[2]
}

func (x WorkerIdentityCard_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkerIdentityCard_Flag.Descriptor instead.
func (WorkerIdentityCard_Flag) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{1, 0}
}

type Organization_Flag int32

const (
	Organization_UNKNOWN Organization_Flag = 0
)

// Enum value maps for Organization_Flag.
var (
	Organization_Flag_name = map[int32]string{
		0: "UNKNOWN",
	}
	Organization_Flag_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x Organization_Flag) Enum() *Organization_Flag {
	p := new(Organization_Flag)
	*p = x
	return p
}

func (x Organization_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Organization_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_proto_enumTypes[3].Descriptor()
}

func (Organization_Flag) Type() protoreflect.EnumType {
	return &file_hcmcore_proto_enumTypes[3]
}

func (x Organization_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Organization_Flag.Descriptor instead.
func (Organization_Flag) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{3, 0}
}

type Organization_Industry int32

const (
	Organization_AGRICULTURE    Organization_Industry = 0
	Organization_PRODUCTION     Organization_Industry = 1
	Organization_CHEMICAL       Organization_Industry = 2
	Organization_COMMERCE       Organization_Industry = 3
	Organization_CONSTRUCTION   Organization_Industry = 4
	Organization_EDUCATION      Organization_Industry = 5
	Organization_FINANCIAL      Organization_Industry = 6
	Organization_RETAIL         Organization_Industry = 7
	Organization_FORESTRY       Organization_Industry = 8
	Organization_HEALTH         Organization_Industry = 9
	Organization_HOSPITALITY    Organization_Industry = 10
	Organization_MINING         Organization_Industry = 11
	Organization_MECHANICAL     Organization_Industry = 12
	Organization_PUBLIC_SERVICE Organization_Industry = 13
	Organization_TELECOM        Organization_Industry = 14
	Organization_SHIPPING       Organization_Industry = 15
	Organization_TEXTILE        Organization_Industry = 16
	Organization_TRANSPORT      Organization_Industry = 17
	Organization_EQUIPMENT      Organization_Industry = 18
	Organization_UTILITIES      Organization_Industry = 19
	Organization_OTHER          Organization_Industry = 20
)

// Enum value maps for Organization_Industry.
var (
	Organization_Industry_name = map[int32]string{
		0:  "AGRICULTURE",
		1:  "PRODUCTION",
		2:  "CHEMICAL",
		3:  "COMMERCE",
		4:  "CONSTRUCTION",
		5:  "EDUCATION",
		6:  "FINANCIAL",
		7:  "RETAIL",
		8:  "FORESTRY",
		9:  "HEALTH",
		10: "HOSPITALITY",
		11: "MINING",
		12: "MECHANICAL",
		13: "PUBLIC_SERVICE",
		14: "TELECOM",
		15: "SHIPPING",
		16: "TEXTILE",
		17: "TRANSPORT",
		18: "EQUIPMENT",
		19: "UTILITIES",
		20: "OTHER",
	}
	Organization_Industry_value = map[string]int32{
		"AGRICULTURE":    0,
		"PRODUCTION":     1,
		"CHEMICAL":       2,
		"COMMERCE":       3,
		"CONSTRUCTION":   4,
		"EDUCATION":      5,
		"FINANCIAL":      6,
		"RETAIL":         7,
		"FORESTRY":       8,
		"HEALTH":         9,
		"HOSPITALITY":    10,
		"MINING":         11,
		"MECHANICAL":     12,
		"PUBLIC_SERVICE": 13,
		"TELECOM":        14,
		"SHIPPING":       15,
		"TEXTILE":        16,
		"TRANSPORT":      17,
		"EQUIPMENT":      18,
		"UTILITIES":      19,
		"OTHER":          20,
	}
)

func (x Organization_Industry) Enum() *Organization_Industry {
	p := new(Organization_Industry)
	*p = x
	return p
}

func (x Organization_Industry) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Organization_Industry) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_proto_enumTypes[4].Descriptor()
}

func (Organization_Industry) Type() protoreflect.EnumType {
	return &file_hcmcore_proto_enumTypes[4]
}

func (x Organization_Industry) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Organization_Industry.Descriptor instead.
func (Organization_Industry) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{3, 1}
}

type Member_Flag int32

const (
	Member_UNKNOWN Member_Flag = 0
	// Toggle each of these bits according to the current state
	// of the worker in an organization.
	Member_S_REMOTE     Member_Flag = 1
	Member_S_HIRED      Member_Flag = 2
	Member_S_DAYOFF     Member_Flag = 4
	Member_S_ONCALL     Member_Flag = 8
	Member_S_ONLEAVE    Member_Flag = 16
	Member_S_TERMINATED Member_Flag = 32
	Member_S_SUSPENDED  Member_Flag = 64
)

// Enum value maps for Member_Flag.
var (
	Member_Flag_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "S_REMOTE",
		2:  "S_HIRED",
		4:  "S_DAYOFF",
		8:  "S_ONCALL",
		16: "S_ONLEAVE",
		32: "S_TERMINATED",
		64: "S_SUSPENDED",
	}
	Member_Flag_value = map[string]int32{
		"UNKNOWN":      0,
		"S_REMOTE":     1,
		"S_HIRED":      2,
		"S_DAYOFF":     4,
		"S_ONCALL":     8,
		"S_ONLEAVE":    16,
		"S_TERMINATED": 32,
		"S_SUSPENDED":  64,
	}
)

func (x Member_Flag) Enum() *Member_Flag {
	p := new(Member_Flag)
	*p = x
	return p
}

func (x Member_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Member_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_proto_enumTypes[5].Descriptor()
}

func (Member_Flag) Type() protoreflect.EnumType {
	return &file_hcmcore_proto_enumTypes[5]
}

func (x Member_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Member_Flag.Descriptor instead.
func (Member_Flag) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{4, 0}
}

type JoinRequest_Flag int32

const (
	JoinRequest_UNKNOWN JoinRequest_Flag = 0
)

// Enum value maps for JoinRequest_Flag.
var (
	JoinRequest_Flag_name = map[int32]string{
		0: "UNKNOWN",
	}
	JoinRequest_Flag_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x JoinRequest_Flag) Enum() *JoinRequest_Flag {
	p := new(JoinRequest_Flag)
	*p = x
	return p
}

func (x JoinRequest_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinRequest_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_proto_enumTypes[6].Descriptor()
}

func (JoinRequest_Flag) Type() protoreflect.EnumType {
	return &file_hcmcore_proto_enumTypes[6]
}

func (x JoinRequest_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinRequest_Flag.Descriptor instead.
func (JoinRequest_Flag) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{6, 0}
}

type Role_Flag int32

const (
	Role_UNKNOWN Role_Flag = 0
)

// Enum value maps for Role_Flag.
var (
	Role_Flag_name = map[int32]string{
		0: "UNKNOWN",
	}
	Role_Flag_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x Role_Flag) Enum() *Role_Flag {
	p := new(Role_Flag)
	*p = x
	return p
}

func (x Role_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_proto_enumTypes[7].Descriptor()
}

func (Role_Flag) Type() protoreflect.EnumType {
	return &file_hcmcore_proto_enumTypes[7]
}

func (x Role_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role_Flag.Descriptor instead.
func (Role_Flag) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{9, 0}
}

type Team_Flag int32

const (
	Team_UNKNOWN Team_Flag = 0
)

// Enum value maps for Team_Flag.
var (
	Team_Flag_name = map[int32]string{
		0: "UNKNOWN",
	}
	Team_Flag_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x Team_Flag) Enum() *Team_Flag {
	p := new(Team_Flag)
	*p = x
	return p
}

func (x Team_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Team_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_proto_enumTypes[8].Descriptor()
}

func (Team_Flag) Type() protoreflect.EnumType {
	return &file_hcmcore_proto_enumTypes[8]
}

func (x Team_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Team_Flag.Descriptor instead.
func (Team_Flag) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{12, 0}
}

type Compensation_Flag int32

const (
	Compensation_UNKNOWN Compensation_Flag = 0
)

// Enum value maps for Compensation_Flag.
var (
	Compensation_Flag_name = map[int32]string{
		0: "UNKNOWN",
	}
	Compensation_Flag_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x Compensation_Flag) Enum() *Compensation_Flag {
	p := new(Compensation_Flag)
	*p = x
	return p
}

func (x Compensation_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Compensation_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_proto_enumTypes[9].Descriptor()
}

func (Compensation_Flag) Type() protoreflect.EnumType {
	return &file_hcmcore_proto_enumTypes[9]
}

func (x Compensation_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Compensation_Flag.Descriptor instead.
func (Compensation_Flag) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{14, 0}
}

type Addition_Flag int32

const (
	Addition_UNKNOWN     Addition_Flag = 0
	Addition_T_EPHEMERAL Addition_Flag = 1
)

// Enum value maps for Addition_Flag.
var (
	Addition_Flag_name = map[int32]string{
		0: "UNKNOWN",
		1: "T_EPHEMERAL",
	}
	Addition_Flag_value = map[string]int32{
		"UNKNOWN":     0,
		"T_EPHEMERAL": 1,
	}
)

func (x Addition_Flag) Enum() *Addition_Flag {
	p := new(Addition_Flag)
	*p = x
	return p
}

func (x Addition_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Addition_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_proto_enumTypes[10].Descriptor()
}

func (Addition_Flag) Type() protoreflect.EnumType {
	return &file_hcmcore_proto_enumTypes[10]
}

func (x Addition_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Addition_Flag.Descriptor instead.
func (Addition_Flag) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{15, 0}
}

type Deducion_Flag int32

const (
	Deducion_UNKNOWN     Deducion_Flag = 0
	Deducion_T_EPHEMERAL Deducion_Flag = 1
	Deducion_T_VOLUNTARY Deducion_Flag = 2
)

// Enum value maps for Deducion_Flag.
var (
	Deducion_Flag_name = map[int32]string{
		0: "UNKNOWN",
		1: "T_EPHEMERAL",
		2: "T_VOLUNTARY",
	}
	Deducion_Flag_value = map[string]int32{
		"UNKNOWN":     0,
		"T_EPHEMERAL": 1,
		"T_VOLUNTARY": 2,
	}
)

func (x Deducion_Flag) Enum() *Deducion_Flag {
	p := new(Deducion_Flag)
	*p = x
	return p
}

func (x Deducion_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Deducion_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_proto_enumTypes[11].Descriptor()
}

func (Deducion_Flag) Type() protoreflect.EnumType {
	return &file_hcmcore_proto_enumTypes[11]
}

func (x Deducion_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Deducion_Flag.Descriptor instead.
func (Deducion_Flag) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{16, 0}
}

type Payroll_Flag int32

const (
	Payroll_UNKNOWN Payroll_Flag = 0
)

// Enum value maps for Payroll_Flag.
var (
	Payroll_Flag_name = map[int32]string{
		0: "UNKNOWN",
	}
	Payroll_Flag_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x Payroll_Flag) Enum() *Payroll_Flag {
	p := new(Payroll_Flag)
	*p = x
	return p
}

func (x Payroll_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Payroll_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_proto_enumTypes[12].Descriptor()
}

func (Payroll_Flag) Type() protoreflect.EnumType {
	return &file_hcmcore_proto_enumTypes[12]
}

func (x Payroll_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Payroll_Flag.Descriptor instead.
func (Payroll_Flag) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{19, 0}
}

type Attendance_Flag int32

const (
	Attendance_UNKNOWN Attendance_Flag = 0
)

// Enum value maps for Attendance_Flag.
var (
	Attendance_Flag_name = map[int32]string{
		0: "UNKNOWN",
	}
	Attendance_Flag_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x Attendance_Flag) Enum() *Attendance_Flag {
	p := new(Attendance_Flag)
	*p = x
	return p
}

func (x Attendance_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Attendance_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_proto_enumTypes[13].Descriptor()
}

func (Attendance_Flag) Type() protoreflect.EnumType {
	return &file_hcmcore_proto_enumTypes[13]
}

func (x Attendance_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Attendance_Flag.Descriptor instead.
func (Attendance_Flag) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{21, 0}
}

type OverrideShift_Flag int32

const (
	OverrideShift_UNKNOWN OverrideShift_Flag = 0
)

// Enum value maps for OverrideShift_Flag.
var (
	OverrideShift_Flag_name = map[int32]string{
		0: "UNKNOWN",
	}
	OverrideShift_Flag_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x OverrideShift_Flag) Enum() *OverrideShift_Flag {
	p := new(OverrideShift_Flag)
	*p = x
	return p
}

func (x OverrideShift_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OverrideShift_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_hcmcore_proto_enumTypes[14].Descriptor()
}

func (OverrideShift_Flag) Type() protoreflect.EnumType {
	return &file_hcmcore_proto_enumTypes[14]
}

func (x OverrideShift_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OverrideShift_Flag.Descriptor instead.
func (OverrideShift_Flag) EnumDescriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{23, 0}
}

// Table: workers
type Worker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        *int64                 `protobuf:"varint,2,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	CreatedById   *int64                 `protobuf:"varint,3,opt,name=createdById,proto3,oneof" json:"createdById,omitempty"`
	UpdatedById   *int64                 `protobuf:"varint,4,opt,name=updatedById,proto3,oneof" json:"updatedById,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=lastUpdatedAt,proto3,oneof" json:"lastUpdatedAt,omitempty"`
	PictureUrl    *string                `protobuf:"bytes,7,opt,name=pictureUrl,proto3,oneof" json:"pictureUrl,omitempty"`
	FirstName     string                 `protobuf:"bytes,8,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName      string                 `protobuf:"bytes,9,opt,name=lastName,proto3" json:"lastName,omitempty"`
	MiddleName    *string                `protobuf:"bytes,10,opt,name=middleName,proto3,oneof" json:"middleName,omitempty"`
	Birthdate     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=birthdate,proto3,oneof" json:"birthdate,omitempty"`
	Username      string                 `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`
	Email         string                 `protobuf:"bytes,13,opt,name=email,proto3" json:"email,omitempty"`
	Mobile        *string                `protobuf:"bytes,14,opt,name=mobile,proto3,oneof" json:"mobile,omitempty"`
	Addresses     []*structpb.Struct     `protobuf:"bytes,15,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Flags         uint32                 `protobuf:"varint,16,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Worker) Reset() {
	*x = Worker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{0}
}

func (x *Worker) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Worker) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *Worker) GetCreatedById() int64 {
	if x != nil && x.CreatedById != nil {
		return *x.CreatedById
	}
	return 0
}

func (x *Worker) GetUpdatedById() int64 {
	if x != nil && x.UpdatedById != nil {
		return *x.UpdatedById
	}
	return 0
}

func (x *Worker) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Worker) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Worker) GetPictureUrl() string {
	if x != nil && x.PictureUrl != nil {
		return *x.PictureUrl
	}
	return ""
}

func (x *Worker) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Worker) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Worker) GetMiddleName() string {
	if x != nil && x.MiddleName != nil {
		return *x.MiddleName
	}
	return ""
}

func (x *Worker) GetBirthdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Birthdate
	}
	return nil
}

func (x *Worker) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Worker) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Worker) GetMobile() string {
	if x != nil && x.Mobile != nil {
		return *x.Mobile
	}
	return ""
}

func (x *Worker) GetAddresses() []*structpb.Struct {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Worker) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// Table: workerIdentityCards
type WorkerIdentityCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkerId      int64                  `protobuf:"varint,2,opt,name=workerId,proto3" json:"workerId,omitempty"`
	CreatedById   *int64                 `protobuf:"varint,3,opt,name=createdById,proto3,oneof" json:"createdById,omitempty"`
	UpdatedById   *int64                 `protobuf:"varint,4,opt,name=updatedById,proto3,oneof" json:"updatedById,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=lastUpdatedAt,proto3,oneof" json:"lastUpdatedAt,omitempty"`
	FrontImageUrl string                 `protobuf:"bytes,7,opt,name=frontImageUrl,proto3" json:"frontImageUrl,omitempty"`
	BackImageUrl  string                 `protobuf:"bytes,8,opt,name=backImageUrl,proto3" json:"backImageUrl,omitempty"`
	Name          string                 `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	ExtractedInfo *structpb.Struct       `protobuf:"bytes,10,opt,name=extractedInfo,proto3,oneof" json:"extractedInfo,omitempty"`
	Flags         uint32                 `protobuf:"varint,11,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *WorkerIdentityCard) Reset() {
	*x = WorkerIdentityCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerIdentityCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerIdentityCard) ProtoMessage() {}

func (x *WorkerIdentityCard) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerIdentityCard.ProtoReflect.Descriptor instead.
func (*WorkerIdentityCard) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{1}
}

func (x *WorkerIdentityCard) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkerIdentityCard) GetWorkerId() int64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *WorkerIdentityCard) GetCreatedById() int64 {
	if x != nil && x.CreatedById != nil {
		return *x.CreatedById
	}
	return 0
}

func (x *WorkerIdentityCard) GetUpdatedById() int64 {
	if x != nil && x.UpdatedById != nil {
		return *x.UpdatedById
	}
	return 0
}

func (x *WorkerIdentityCard) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WorkerIdentityCard) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *WorkerIdentityCard) GetFrontImageUrl() string {
	if x != nil {
		return x.FrontImageUrl
	}
	return ""
}

func (x *WorkerIdentityCard) GetBackImageUrl() string {
	if x != nil {
		return x.BackImageUrl
	}
	return ""
}

func (x *WorkerIdentityCard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkerIdentityCard) GetExtractedInfo() *structpb.Struct {
	if x != nil {
		return x.ExtractedInfo
	}
	return nil
}

func (x *WorkerIdentityCard) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// Table: workerIdentityCards
type WorkerIdentityCardRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerId int64 `protobuf:"varint,2,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	CardId  int64 `protobuf:"varint,3,opt,name=cardId,proto3" json:"cardId,omitempty"`
}

func (x *WorkerIdentityCardRelation) Reset() {
	*x = WorkerIdentityCardRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerIdentityCardRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerIdentityCardRelation) ProtoMessage() {}

func (x *WorkerIdentityCardRelation) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerIdentityCardRelation.ProtoReflect.Descriptor instead.
func (*WorkerIdentityCardRelation) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{2}
}

func (x *WorkerIdentityCardRelation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkerIdentityCardRelation) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *WorkerIdentityCardRelation) GetCardId() int64 {
	if x != nil {
		return x.CardId
	}
	return 0
}

// Table: organizations
type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedById      *int64                 `protobuf:"varint,2,opt,name=createdById,proto3,oneof" json:"createdById,omitempty"`
	UpdatedById      *int64                 `protobuf:"varint,3,opt,name=updatedById,proto3,oneof" json:"updatedById,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	LastUpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lastUpdatedAt,proto3,oneof" json:"lastUpdatedAt,omitempty"`
	Industry         Organization_Industry  `protobuf:"varint,6,opt,name=industry,proto3,enum=entities.Organization_Industry" json:"industry,omitempty"`
	OverrideIndustry *string                `protobuf:"bytes,7,opt,name=overrideIndustry,proto3,oneof" json:"overrideIndustry,omitempty"`
	Name             string                 `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Flags            uint32                 `protobuf:"varint,9,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{3}
}

func (x *Organization) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Organization) GetCreatedById() int64 {
	if x != nil && x.CreatedById != nil {
		return *x.CreatedById
	}
	return 0
}

func (x *Organization) GetUpdatedById() int64 {
	if x != nil && x.UpdatedById != nil {
		return *x.UpdatedById
	}
	return 0
}

func (x *Organization) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Organization) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Organization) GetIndustry() Organization_Industry {
	if x != nil {
		return x.Industry
	}
	return Organization_AGRICULTURE
}

func (x *Organization) GetOverrideIndustry() string {
	if x != nil && x.OverrideIndustry != nil {
		return *x.OverrideIndustry
	}
	return ""
}

func (x *Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organization) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// Table: organizationsMembers
type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationId        int64                  `protobuf:"varint,2,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
	WorkerId              int64                  `protobuf:"varint,3,opt,name=workerId,proto3" json:"workerId,omitempty"`
	HiredBy               *int64                 `protobuf:"varint,4,opt,name=hiredBy,proto3,oneof" json:"hiredBy,omitempty"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	LastUpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=lastUpdatedAt,proto3,oneof" json:"lastUpdatedAt,omitempty"`
	HiredAt               *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=hiredAt,proto3,oneof" json:"hiredAt,omitempty"`
	SuspendedAt           *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=suspendedAt,proto3,oneof" json:"suspendedAt,omitempty"`
	LeaveAt               *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=leaveAt,proto3,oneof" json:"leaveAt,omitempty"`
	TerminatedAt          *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=terminatedAt,proto3,oneof" json:"terminatedAt,omitempty"`
	ReturnedAt            *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=returnedAt,proto3,oneof" json:"returnedAt,omitempty"`
	ScheduledSuspensionAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=scheduledSuspensionAt,proto3,oneof" json:"scheduledSuspensionAt,omitempty"`
	Flags                 uint32                 `protobuf:"varint,15,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{4}
}

func (x *Member) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Member) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *Member) GetWorkerId() int64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *Member) GetHiredBy() int64 {
	if x != nil && x.HiredBy != nil {
		return *x.HiredBy
	}
	return 0
}

func (x *Member) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Member) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Member) GetHiredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.HiredAt
	}
	return nil
}

func (x *Member) GetSuspendedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SuspendedAt
	}
	return nil
}

func (x *Member) GetLeaveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LeaveAt
	}
	return nil
}

func (x *Member) GetTerminatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TerminatedAt
	}
	return nil
}

func (x *Member) GetReturnedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReturnedAt
	}
	return nil
}

func (x *Member) GetScheduledSuspensionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledSuspensionAt
	}
	return nil
}

func (x *Member) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// Table: workerOrganizations
type WorkerOrganizationRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkerId       int64 `protobuf:"varint,2,opt,name=workerId,proto3" json:"workerId,omitempty"`
	OrganizationId int64 `protobuf:"varint,3,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
}

func (x *WorkerOrganizationRelation) Reset() {
	*x = WorkerOrganizationRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerOrganizationRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerOrganizationRelation) ProtoMessage() {}

func (x *WorkerOrganizationRelation) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerOrganizationRelation.ProtoReflect.Descriptor instead.
func (*WorkerOrganizationRelation) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{5}
}

func (x *WorkerOrganizationRelation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkerOrganizationRelation) GetWorkerId() int64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *WorkerOrganizationRelation) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

// Table: pendingJoinRequests
type JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkerId       int64                  `protobuf:"varint,2,opt,name=workerId,proto3" json:"workerId,omitempty"`
	OrganizationId int64                  `protobuf:"varint,3,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	ExpiredAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiredAt,proto3" json:"expiredAt,omitempty"`
	Flags          uint32                 `protobuf:"varint,6,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{6}
}

func (x *JoinRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *JoinRequest) GetWorkerId() int64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *JoinRequest) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *JoinRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *JoinRequest) GetExpiredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredAt
	}
	return nil
}

func (x *JoinRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// Table: organizationsPendingRequests
type OrganizationPendingRequestRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationId int64 `protobuf:"varint,2,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
	RequestId      int64 `protobuf:"varint,3,opt,name=requestId,proto3" json:"requestId,omitempty"`
}

func (x *OrganizationPendingRequestRelation) Reset() {
	*x = OrganizationPendingRequestRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationPendingRequestRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationPendingRequestRelation) ProtoMessage() {}

func (x *OrganizationPendingRequestRelation) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationPendingRequestRelation.ProtoReflect.Descriptor instead.
func (*OrganizationPendingRequestRelation) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{7}
}

func (x *OrganizationPendingRequestRelation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrganizationPendingRequestRelation) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *OrganizationPendingRequestRelation) GetRequestId() int64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

// Table: workerPendingRequests
type WorkerPendingRequestRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkerId  int64 `protobuf:"varint,2,opt,name=workerId,proto3" json:"workerId,omitempty"`
	RequestId int64 `protobuf:"varint,3,opt,name=requestId,proto3" json:"requestId,omitempty"`
}

func (x *WorkerPendingRequestRelation) Reset() {
	*x = WorkerPendingRequestRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerPendingRequestRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerPendingRequestRelation) ProtoMessage() {}

func (x *WorkerPendingRequestRelation) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerPendingRequestRelation.ProtoReflect.Descriptor instead.
func (*WorkerPendingRequestRelation) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{8}
}

func (x *WorkerPendingRequestRelation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkerPendingRequestRelation) GetWorkerId() int64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *WorkerPendingRequestRelation) GetRequestId() int64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

// Table: roles
type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedById    *int64                 `protobuf:"varint,2,opt,name=createdById,proto3,oneof" json:"createdById,omitempty"`
	UpdatedById    *int64                 `protobuf:"varint,3,opt,name=updatedById,proto3,oneof" json:"updatedById,omitempty"`
	OrganizationId int64                  `protobuf:"varint,4,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	LastUpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=lastUpdatedAt,proto3,oneof" json:"lastUpdatedAt,omitempty"`
	Name           string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Flags          uint32                 `protobuf:"varint,8,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{9}
}

func (x *Role) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Role) GetCreatedById() int64 {
	if x != nil && x.CreatedById != nil {
		return *x.CreatedById
	}
	return 0
}

func (x *Role) GetUpdatedById() int64 {
	if x != nil && x.UpdatedById != nil {
		return *x.UpdatedById
	}
	return 0
}

func (x *Role) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *Role) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Role) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// Table: rolesStandardShifts
type RoleShiftRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RoleId          int64 `protobuf:"varint,2,opt,name=roleId,proto3" json:"roleId,omitempty"`
	StandardShiftId int64 `protobuf:"varint,3,opt,name=standardShiftId,proto3" json:"standardShiftId,omitempty"`
}

func (x *RoleShiftRelation) Reset() {
	*x = RoleShiftRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleShiftRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleShiftRelation) ProtoMessage() {}

func (x *RoleShiftRelation) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleShiftRelation.ProtoReflect.Descriptor instead.
func (*RoleShiftRelation) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{10}
}

func (x *RoleShiftRelation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoleShiftRelation) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *RoleShiftRelation) GetStandardShiftId() int64 {
	if x != nil {
		return x.StandardShiftId
	}
	return 0
}

// Table: workerRoles
type WorkerRoleRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RoleId         int64 `protobuf:"varint,2,opt,name=roleId,proto3" json:"roleId,omitempty"`
	WorkerId       int64 `protobuf:"varint,3,opt,name=workerId,proto3" json:"workerId,omitempty"`
	OrganizationId int64 `protobuf:"varint,4,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
}

func (x *WorkerRoleRelation) Reset() {
	*x = WorkerRoleRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerRoleRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerRoleRelation) ProtoMessage() {}

func (x *WorkerRoleRelation) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerRoleRelation.ProtoReflect.Descriptor instead.
func (*WorkerRoleRelation) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{11}
}

func (x *WorkerRoleRelation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkerRoleRelation) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *WorkerRoleRelation) GetWorkerId() int64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *WorkerRoleRelation) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

// Table: teams
type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedById    *int64                 `protobuf:"varint,2,opt,name=createdById,proto3,oneof" json:"createdById,omitempty"`
	UpdatedById    *int64                 `protobuf:"varint,3,opt,name=updatedById,proto3,oneof" json:"updatedById,omitempty"`
	OrganizationId int64                  `protobuf:"varint,4,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	LastUpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=lastUpdatedAt,proto3,oneof" json:"lastUpdatedAt,omitempty"`
	Name           string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Flags          uint32                 `protobuf:"varint,8,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{12}
}

func (x *Team) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Team) GetCreatedById() int64 {
	if x != nil && x.CreatedById != nil {
		return *x.CreatedById
	}
	return 0
}

func (x *Team) GetUpdatedById() int64 {
	if x != nil && x.UpdatedById != nil {
		return *x.UpdatedById
	}
	return 0
}

func (x *Team) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *Team) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Team) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// Table: teamsMembers
type TeamMemberRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TeamId   int64 `protobuf:"varint,2,opt,name=teamId,proto3" json:"teamId,omitempty"`
	WorkerId int64 `protobuf:"varint,3,opt,name=workerId,proto3" json:"workerId,omitempty"`
}

func (x *TeamMemberRelation) Reset() {
	*x = TeamMemberRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamMemberRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMemberRelation) ProtoMessage() {}

func (x *TeamMemberRelation) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMemberRelation.ProtoReflect.Descriptor instead.
func (*TeamMemberRelation) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{13}
}

func (x *TeamMemberRelation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TeamMemberRelation) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *TeamMemberRelation) GetWorkerId() int64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

// Table: compensations
type Compensation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedById   *int64                 `protobuf:"varint,2,opt,name=createdById,proto3,oneof" json:"createdById,omitempty"`
	UpdatedById   *int64                 `protobuf:"varint,3,opt,name=updatedById,proto3,oneof" json:"updatedById,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lastUpdatedAt,proto3,oneof" json:"lastUpdatedAt,omitempty"`
	PaidAt        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=paidAt,proto3,oneof" json:"paidAt,omitempty"`
	ApprovedAt    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=approvedAt,proto3,oneof" json:"approvedAt,omitempty"`
	RejectedAt    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=rejectedAt,proto3,oneof" json:"rejectedAt,omitempty"`
	PeriodStart   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=periodStart,proto3" json:"periodStart,omitempty"`
	PeriodEnd     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=periodEnd,proto3" json:"periodEnd,omitempty"`
	Gvalue        float32                `protobuf:"fixed32,11,opt,name=gvalue,proto3" json:"gvalue,omitempty"`
	Avalue        float32                `protobuf:"fixed32,12,opt,name=avalue,proto3" json:"avalue,omitempty"`
	Dvalue        float32                `protobuf:"fixed32,13,opt,name=dvalue,proto3" json:"dvalue,omitempty"`
	Value         float32                `protobuf:"fixed32,14,opt,name=value,proto3" json:"value,omitempty"`
	Flags         uint32                 `protobuf:"varint,15,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Compensation) Reset() {
	*x = Compensation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Compensation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compensation) ProtoMessage() {}

func (x *Compensation) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compensation.ProtoReflect.Descriptor instead.
func (*Compensation) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{14}
}

func (x *Compensation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Compensation) GetCreatedById() int64 {
	if x != nil && x.CreatedById != nil {
		return *x.CreatedById
	}
	return 0
}

func (x *Compensation) GetUpdatedById() int64 {
	if x != nil && x.UpdatedById != nil {
		return *x.UpdatedById
	}
	return 0
}

func (x *Compensation) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Compensation) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Compensation) GetPaidAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PaidAt
	}
	return nil
}

func (x *Compensation) GetApprovedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApprovedAt
	}
	return nil
}

func (x *Compensation) GetRejectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RejectedAt
	}
	return nil
}

func (x *Compensation) GetPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *Compensation) GetPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodEnd
	}
	return nil
}

func (x *Compensation) GetGvalue() float32 {
	if x != nil {
		return x.Gvalue
	}
	return 0
}

func (x *Compensation) GetAvalue() float32 {
	if x != nil {
		return x.Avalue
	}
	return 0
}

func (x *Compensation) GetDvalue() float32 {
	if x != nil {
		return x.Dvalue
	}
	return 0
}

func (x *Compensation) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Compensation) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// Table: additions
type Addition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedById   *int64                 `protobuf:"varint,2,opt,name=createdById,proto3,oneof" json:"createdById,omitempty"`
	UpdatedByid   *int64                 `protobuf:"varint,3,opt,name=updatedByid,proto3,oneof" json:"updatedByid,omitempty"`
	WorkerId      *int64                 `protobuf:"varint,4,opt,name=workerId,proto3,oneof" json:"workerId,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=lastUpdatedAt,proto3,oneof" json:"lastUpdatedAt,omitempty"`
	EffectiveAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=effectiveAt,proto3,oneof" json:"effectiveAt,omitempty"`
	Name          string                 `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Value         float32                `protobuf:"fixed32,9,opt,name=value,proto3" json:"value,omitempty"`
	Flags         uint32                 `protobuf:"varint,10,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Addition) Reset() {
	*x = Addition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addition) ProtoMessage() {}

func (x *Addition) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addition.ProtoReflect.Descriptor instead.
func (*Addition) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{15}
}

func (x *Addition) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Addition) GetCreatedById() int64 {
	if x != nil && x.CreatedById != nil {
		return *x.CreatedById
	}
	return 0
}

func (x *Addition) GetUpdatedByid() int64 {
	if x != nil && x.UpdatedByid != nil {
		return *x.UpdatedByid
	}
	return 0
}

func (x *Addition) GetWorkerId() int64 {
	if x != nil && x.WorkerId != nil {
		return *x.WorkerId
	}
	return 0
}

func (x *Addition) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Addition) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Addition) GetEffectiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveAt
	}
	return nil
}

func (x *Addition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Addition) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Addition) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// Table: deductions
type Deducion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedById   *int64                 `protobuf:"varint,2,opt,name=createdById,proto3,oneof" json:"createdById,omitempty"`
	UpdatedByid   *int64                 `protobuf:"varint,3,opt,name=updatedByid,proto3,oneof" json:"updatedByid,omitempty"`
	WorkerId      *int64                 `protobuf:"varint,4,opt,name=workerId,proto3,oneof" json:"workerId,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=lastUpdatedAt,proto3,oneof" json:"lastUpdatedAt,omitempty"`
	EffectiveAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=effectiveAt,proto3,oneof" json:"effectiveAt,omitempty"`
	Name          string                 `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Value         float32                `protobuf:"fixed32,9,opt,name=value,proto3" json:"value,omitempty"`
	Flags         uint32                 `protobuf:"varint,10,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Deducion) Reset() {
	*x = Deducion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deducion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deducion) ProtoMessage() {}

func (x *Deducion) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deducion.ProtoReflect.Descriptor instead.
func (*Deducion) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{16}
}

func (x *Deducion) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Deducion) GetCreatedById() int64 {
	if x != nil && x.CreatedById != nil {
		return *x.CreatedById
	}
	return 0
}

func (x *Deducion) GetUpdatedByid() int64 {
	if x != nil && x.UpdatedByid != nil {
		return *x.UpdatedByid
	}
	return 0
}

func (x *Deducion) GetWorkerId() int64 {
	if x != nil && x.WorkerId != nil {
		return *x.WorkerId
	}
	return 0
}

func (x *Deducion) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Deducion) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Deducion) GetEffectiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveAt
	}
	return nil
}

func (x *Deducion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Deducion) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Deducion) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// Table: compensationsAdditions
type CompensationAdditionRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CompensationId int64 `protobuf:"varint,2,opt,name=compensationId,proto3" json:"compensationId,omitempty"`
	AdditionId     int64 `protobuf:"varint,3,opt,name=additionId,proto3" json:"additionId,omitempty"`
}

func (x *CompensationAdditionRelation) Reset() {
	*x = CompensationAdditionRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompensationAdditionRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompensationAdditionRelation) ProtoMessage() {}

func (x *CompensationAdditionRelation) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompensationAdditionRelation.ProtoReflect.Descriptor instead.
func (*CompensationAdditionRelation) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{17}
}

func (x *CompensationAdditionRelation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CompensationAdditionRelation) GetCompensationId() int64 {
	if x != nil {
		return x.CompensationId
	}
	return 0
}

func (x *CompensationAdditionRelation) GetAdditionId() int64 {
	if x != nil {
		return x.AdditionId
	}
	return 0
}

// Table: compensationDeductions
type CompensationDeductionRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CompensationId int64 `protobuf:"varint,2,opt,name=compensationId,proto3" json:"compensationId,omitempty"`
	DeductionId    int64 `protobuf:"varint,3,opt,name=deductionId,proto3" json:"deductionId,omitempty"`
}

func (x *CompensationDeductionRelation) Reset() {
	*x = CompensationDeductionRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompensationDeductionRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompensationDeductionRelation) ProtoMessage() {}

func (x *CompensationDeductionRelation) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompensationDeductionRelation.ProtoReflect.Descriptor instead.
func (*CompensationDeductionRelation) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{18}
}

func (x *CompensationDeductionRelation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CompensationDeductionRelation) GetCompensationId() int64 {
	if x != nil {
		return x.CompensationId
	}
	return 0
}

func (x *CompensationDeductionRelation) GetDeductionId() int64 {
	if x != nil {
		return x.DeductionId
	}
	return 0
}

// Table: payrolls
type Payroll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedById    int64                  `protobuf:"varint,2,opt,name=createdById,proto3" json:"createdById,omitempty"`
	UpdatedById    int64                  `protobuf:"varint,3,opt,name=updatedById,proto3" json:"updatedById,omitempty"`
	VerifiedById   int64                  `protobuf:"varint,4,opt,name=verifiedById,proto3" json:"verifiedById,omitempty"`
	OrganizationId int64                  `protobuf:"varint,5,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	LastUpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=lastUpdatedAt,proto3" json:"lastUpdatedAt,omitempty"`
	Total          float32                `protobuf:"fixed32,8,opt,name=total,proto3" json:"total,omitempty"`
	Flags          uint32                 `protobuf:"varint,9,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Payroll) Reset() {
	*x = Payroll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payroll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payroll) ProtoMessage() {}

func (x *Payroll) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payroll.ProtoReflect.Descriptor instead.
func (*Payroll) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{19}
}

func (x *Payroll) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Payroll) GetCreatedById() int64 {
	if x != nil {
		return x.CreatedById
	}
	return 0
}

func (x *Payroll) GetUpdatedById() int64 {
	if x != nil {
		return x.UpdatedById
	}
	return 0
}

func (x *Payroll) GetVerifiedById() int64 {
	if x != nil {
		return x.VerifiedById
	}
	return 0
}

func (x *Payroll) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *Payroll) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Payroll) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Payroll) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Payroll) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// Table: payrollCompensations
type PayrollCompensationRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PayrollId      int64 `protobuf:"varint,2,opt,name=payrollId,proto3" json:"payrollId,omitempty"`
	CompensationId int64 `protobuf:"varint,3,opt,name=compensationId,proto3" json:"compensationId,omitempty"`
}

func (x *PayrollCompensationRelation) Reset() {
	*x = PayrollCompensationRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayrollCompensationRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayrollCompensationRelation) ProtoMessage() {}

func (x *PayrollCompensationRelation) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayrollCompensationRelation.ProtoReflect.Descriptor instead.
func (*PayrollCompensationRelation) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{20}
}

func (x *PayrollCompensationRelation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PayrollCompensationRelation) GetPayrollId() int64 {
	if x != nil {
		return x.PayrollId
	}
	return 0
}

func (x *PayrollCompensationRelation) GetCompensationId() int64 {
	if x != nil {
		return x.CompensationId
	}
	return 0
}

// Table: attendances
type Attendance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkerId      int64                  `protobuf:"varint,2,opt,name=workerId,proto3" json:"workerId,omitempty"`
	ShiftId       *int64                 `protobuf:"varint,3,opt,name=shiftId,proto3,oneof" json:"shiftId,omitempty"`
	OshiftId      *int64                 `protobuf:"varint,4,opt,name=oshiftId,proto3,oneof" json:"oshiftId,omitempty"`
	CreatedById   *int64                 `protobuf:"varint,5,opt,name=createdById,proto3,oneof" json:"createdById,omitempty"`
	UpdatedById   *int64                 `protobuf:"varint,6,opt,name=updatedById,proto3,oneof" json:"updatedById,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=lastUpdatedAt,proto3,oneof" json:"lastUpdatedAt,omitempty"`
	ClockIn       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=clockIn,proto3" json:"clockIn,omitempty"`
	ClockOut      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=clockOut,proto3" json:"clockOut,omitempty"`
	Computed      int64                  `protobuf:"varint,11,opt,name=computed,proto3" json:"computed,omitempty"`
	UnderTime     int64                  `protobuf:"varint,12,opt,name=underTime,proto3" json:"underTime,omitempty"`
	OverTime      int64                  `protobuf:"varint,13,opt,name=overTime,proto3" json:"overTime,omitempty"`
	LateTime      int64                  `protobuf:"varint,14,opt,name=lateTime,proto3" json:"lateTime,omitempty"`
	BreakTime     int64                  `protobuf:"varint,15,opt,name=breakTime,proto3" json:"breakTime,omitempty"`
	Flags         uint32                 `protobuf:"varint,16,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Attendance) Reset() {
	*x = Attendance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attendance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attendance) ProtoMessage() {}

func (x *Attendance) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attendance.ProtoReflect.Descriptor instead.
func (*Attendance) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{21}
}

func (x *Attendance) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Attendance) GetWorkerId() int64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *Attendance) GetShiftId() int64 {
	if x != nil && x.ShiftId != nil {
		return *x.ShiftId
	}
	return 0
}

func (x *Attendance) GetOshiftId() int64 {
	if x != nil && x.OshiftId != nil {
		return *x.OshiftId
	}
	return 0
}

func (x *Attendance) GetCreatedById() int64 {
	if x != nil && x.CreatedById != nil {
		return *x.CreatedById
	}
	return 0
}

func (x *Attendance) GetUpdatedById() int64 {
	if x != nil && x.UpdatedById != nil {
		return *x.UpdatedById
	}
	return 0
}

func (x *Attendance) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Attendance) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Attendance) GetClockIn() *timestamppb.Timestamp {
	if x != nil {
		return x.ClockIn
	}
	return nil
}

func (x *Attendance) GetClockOut() *timestamppb.Timestamp {
	if x != nil {
		return x.ClockOut
	}
	return nil
}

func (x *Attendance) GetComputed() int64 {
	if x != nil {
		return x.Computed
	}
	return 0
}

func (x *Attendance) GetUnderTime() int64 {
	if x != nil {
		return x.UnderTime
	}
	return 0
}

func (x *Attendance) GetOverTime() int64 {
	if x != nil {
		return x.OverTime
	}
	return 0
}

func (x *Attendance) GetLateTime() int64 {
	if x != nil {
		return x.LateTime
	}
	return 0
}

func (x *Attendance) GetBreakTime() int64 {
	if x != nil {
		return x.BreakTime
	}
	return 0
}

func (x *Attendance) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// Table: standardShifts
type Shift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedById    *int64                 `protobuf:"varint,2,opt,name=createdById,proto3,oneof" json:"createdById,omitempty"`
	UpdatedById    *int64                 `protobuf:"varint,3,opt,name=updatedById,proto3,oneof" json:"updatedById,omitempty"`
	OrganizationId int64                  `protobuf:"varint,4,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	LastUpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=lastUpdatedAt,proto3,oneof" json:"lastUpdatedAt,omitempty"`
	Name           string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Day            ShiftDay               `protobuf:"varint,8,opt,name=day,proto3,enum=entities.ShiftDay" json:"day,omitempty"`
	ClockIn        *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=clockIn,proto3" json:"clockIn,omitempty"`
	ClockOut       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=clockOut,proto3" json:"clockOut,omitempty"`
}

func (x *Shift) Reset() {
	*x = Shift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shift) ProtoMessage() {}

func (x *Shift) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shift.ProtoReflect.Descriptor instead.
func (*Shift) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{22}
}

func (x *Shift) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Shift) GetCreatedById() int64 {
	if x != nil && x.CreatedById != nil {
		return *x.CreatedById
	}
	return 0
}

func (x *Shift) GetUpdatedById() int64 {
	if x != nil && x.UpdatedById != nil {
		return *x.UpdatedById
	}
	return 0
}

func (x *Shift) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *Shift) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Shift) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Shift) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Shift) GetDay() ShiftDay {
	if x != nil {
		return x.Day
	}
	return ShiftDay_MON
}

func (x *Shift) GetClockIn() *timestamppb.Timestamp {
	if x != nil {
		return x.ClockIn
	}
	return nil
}

func (x *Shift) GetClockOut() *timestamppb.Timestamp {
	if x != nil {
		return x.ClockOut
	}
	return nil
}

// Table: overrideShifts
type OverrideShift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationId   int64                  `protobuf:"varint,2,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
	CreatedById      *int64                 `protobuf:"varint,3,opt,name=createdById,proto3,oneof" json:"createdById,omitempty"`
	UpdatedById      *int64                 `protobuf:"varint,4,opt,name=updatedById,proto3,oneof" json:"updatedById,omitempty"`
	WorkerId         *int64                 `protobuf:"varint,5,opt,name=workerId,proto3,oneof" json:"workerId,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	LastUpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=lastUpdatedAt,proto3,oneof" json:"lastUpdatedAt,omitempty"`
	VerifiedAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=verifiedAt,proto3,oneof" json:"verifiedAt,omitempty"`
	CompletedAt      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=completedAt,proto3,oneof" json:"completedAt,omitempty"`
	StartsOn         *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=startsOn,proto3" json:"startsOn,omitempty"`
	EndsOn           *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=endsOn,proto3" json:"endsOn,omitempty"`
	Name             string                 `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	Day              ShiftDay               `protobuf:"varint,13,opt,name=day,proto3,enum=entities.ShiftDay" json:"day,omitempty"`
	OverrideClockIn  *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=overrideClockIn,proto3" json:"overrideClockIn,omitempty"`
	OverrideClockOut *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=overrideClockOut,proto3" json:"overrideClockOut,omitempty"`
	GroupId          string                 `protobuf:"bytes,16,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Flags            uint32                 `protobuf:"varint,17,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *OverrideShift) Reset() {
	*x = OverrideShift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcmcore_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideShift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideShift) ProtoMessage() {}

func (x *OverrideShift) ProtoReflect() protoreflect.Message {
	mi := &file_hcmcore_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideShift.ProtoReflect.Descriptor instead.
func (*OverrideShift) Descriptor() ([]byte, []int) {
	return file_hcmcore_proto_rawDescGZIP(), []int{23}
}

func (x *OverrideShift) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OverrideShift) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *OverrideShift) GetCreatedById() int64 {
	if x != nil && x.CreatedById != nil {
		return *x.CreatedById
	}
	return 0
}

func (x *OverrideShift) GetUpdatedById() int64 {
	if x != nil && x.UpdatedById != nil {
		return *x.UpdatedById
	}
	return 0
}

func (x *OverrideShift) GetWorkerId() int64 {
	if x != nil && x.WorkerId != nil {
		return *x.WorkerId
	}
	return 0
}

func (x *OverrideShift) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OverrideShift) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *OverrideShift) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

func (x *OverrideShift) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *OverrideShift) GetStartsOn() *timestamppb.Timestamp {
	if x != nil {
		return x.StartsOn
	}
	return nil
}

func (x *OverrideShift) GetEndsOn() *timestamppb.Timestamp {
	if x != nil {
		return x.EndsOn
	}
	return nil
}

func (x *OverrideShift) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OverrideShift) GetDay() ShiftDay {
	if x != nil {
		return x.Day
	}
	return ShiftDay_MON
}

func (x *OverrideShift) GetOverrideClockIn() *timestamppb.Timestamp {
	if x != nil {
		return x.OverrideClockIn
	}
	return nil
}

func (x *OverrideShift) GetOverrideClockOut() *timestamppb.Timestamp {
	if x != nil {
		return x.OverrideClockOut
	}
	return nil
}

func (x *OverrideShift) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *OverrideShift) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

var File_hcmcore_proto protoreflect.FileDescriptor

var file_hcmcore_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x68, 0x63, 0x6d, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x06, 0x0a, 0x06, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x06, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x3a,
	0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x5f, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x47, 0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x47, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x22, 0xa0,
	0x04, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61,
	0x63, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42,
	0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x03,
	0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x13, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x5e, 0x0a, 0x1a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x22, 0xa2, 0x06, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x3b, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x64, 0x75,
	0x73, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x2f,
	0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x13, 0x0a, 0x04, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x22, 0xbe,
	0x02, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x47, 0x52, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x55, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x48, 0x45, 0x4d, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f,
	0x4d, 0x4d, 0x45, 0x52, 0x43, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x44,
	0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4e,
	0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x59,
	0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x10, 0x09, 0x12, 0x0f,
	0x0a, 0x0b, 0x48, 0x4f, 0x53, 0x50, 0x49, 0x54, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x0a, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x0d, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x45, 0x4c, 0x45, 0x43, 0x4f, 0x4d, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x48, 0x49, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x45,
	0x58, 0x54, 0x49, 0x4c, 0x45, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x54, 0x49, 0x4c, 0x49, 0x54, 0x49,
	0x45, 0x53, 0x10, 0x13, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x14, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x49, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x22, 0xa6, 0x07, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x68, 0x69, 0x72, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x07, 0x68, 0x69, 0x72, 0x65, 0x64, 0x42,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x01, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x07, 0x68, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x02, 0x52, 0x07, 0x68, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x41, 0x0a, 0x0b, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x41, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x04, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43,
	0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x05, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x06, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x07, 0x52, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x22, 0x7c, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x5f, 0x48, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x5f, 0x44, 0x41, 0x59, 0x4f, 0x46, 0x46, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x5f, 0x4f, 0x4e, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x08, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x20, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x40, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x68, 0x69, 0x72, 0x65, 0x64, 0x42, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x68, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x65,
	0x61, 0x76, 0x65, 0x41, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x41, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x22,
	0x70, 0x0a, 0x1a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x80, 0x02, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22,
	0x13, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x22, 0x7a, 0x0a, 0x22, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x68, 0x0a, 0x1c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xfe, 0x02, 0x0a, 0x04, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x01, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x22, 0x13, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x65, 0x0a, 0x11, 0x52,
	0x6f, 0x6c, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xfe, 0x02, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x02, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22,
	0x13, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x58, 0x0a, 0x12, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x84, 0x06, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x06, 0x70, 0x61, 0x69, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x06,
	0x70, 0x61, 0x69, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05, 0x52, 0x0a, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x45, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x67, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x13, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x82, 0x04, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x24, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x5f, 0x45, 0x50, 0x48, 0x45, 0x4d, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x69, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x22, 0x93, 0x04, 0x0a,
	0x08, 0x44, 0x65, 0x64, 0x75, 0x63, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x0b, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x35, 0x0a, 0x04,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x5f, 0x45, 0x50, 0x48, 0x45, 0x4d, 0x45, 0x52, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4e, 0x54, 0x41, 0x52,
	0x59, 0x10, 0x02, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x74, 0x22, 0x76, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x1d, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xe6, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x42, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x13, 0x0a, 0x04, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x22, 0x73,
	0x0a, 0x1b, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0xbb, 0x05, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x07, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x07, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x6f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x01, 0x52, 0x08, 0x6f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x07, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x22, 0x13, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xe8, 0x03, 0x0a, 0x05, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x44, 0x61, 0x79, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x34, 0x0a, 0x07,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x92, 0x07, 0x0a,
	0x0d, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x45, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x73, 0x4f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73,
	0x4f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06,
	0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x64, 0x61,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x44, 0x61, 0x79, 0x52, 0x03, 0x64, 0x61, 0x79,
	0x12, 0x44, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x13,
	0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x2a, 0x49, 0x0a, 0x08, 0x53, 0x68, 0x69, 0x66, 0x74, 0x44, 0x61, 0x79, 0x12, 0x07, 0x0a,
	0x03, 0x4d, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x55, 0x45, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x57, 0x45, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x48, 0x55, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x52, 0x49, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x41,
	0x54, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4e, 0x10, 0x06, 0x32, 0x10, 0x0a, 0x0e,
	0x48, 0x43, 0x4d, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x1d,
	0x48, 0x01, 0x5a, 0x19, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hcmcore_proto_rawDescOnce sync.Once
	file_hcmcore_proto_rawDescData = file_hcmcore_proto_rawDesc
)

func file_hcmcore_proto_rawDescGZIP() []byte {
	file_hcmcore_proto_rawDescOnce.Do(func() {
		file_hcmcore_proto_rawDescData = protoimpl.X.CompressGZIP(file_hcmcore_proto_rawDescData)
	})
	return file_hcmcore_proto_rawDescData
}

var file_hcmcore_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_hcmcore_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_hcmcore_proto_goTypes = []interface{}{
	(ShiftDay)(0),                              // 0: entities.ShiftDay
	(Worker_Flag)(0),                           // 1: entities.Worker.Flag
	(WorkerIdentityCard_Flag)(0),               // 2: entities.WorkerIdentityCard.Flag
	(Organization_Flag)(0),                     // 3: entities.Organization.Flag
	(Organization_Industry)(0),                 // 4: entities.Organization.Industry
	(Member_Flag)(0),                           // 5: entities.Member.Flag
	(JoinRequest_Flag)(0),                      // 6: entities.JoinRequest.Flag
	(Role_Flag)(0),                             // 7: entities.Role.Flag
	(Team_Flag)(0),                             // 8: entities.Team.Flag
	(Compensation_Flag)(0),                     // 9: entities.Compensation.Flag
	(Addition_Flag)(0),                         // 10: entities.Addition.Flag
	(Deducion_Flag)(0),                         // 11: entities.Deducion.Flag
	(Payroll_Flag)(0),                          // 12: entities.Payroll.Flag
	(Attendance_Flag)(0),                       // 13: entities.Attendance.Flag
	(OverrideShift_Flag)(0),                    // 14: entities.OverrideShift.Flag
	(*Worker)(nil),                             // 15: entities.Worker
	(*WorkerIdentityCard)(nil),                 // 16: entities.WorkerIdentityCard
	(*WorkerIdentityCardRelation)(nil),         // 17: entities.WorkerIdentityCardRelation
	(*Organization)(nil),                       // 18: entities.Organization
	(*Member)(nil),                             // 19: entities.Member
	(*WorkerOrganizationRelation)(nil),         // 20: entities.WorkerOrganizationRelation
	(*JoinRequest)(nil),                        // 21: entities.JoinRequest
	(*OrganizationPendingRequestRelation)(nil), // 22: entities.OrganizationPendingRequestRelation
	(*WorkerPendingRequestRelation)(nil),       // 23: entities.WorkerPendingRequestRelation
	(*Role)(nil),                               // 24: entities.Role
	(*RoleShiftRelation)(nil),                  // 25: entities.RoleShiftRelation
	(*WorkerRoleRelation)(nil),                 // 26: entities.WorkerRoleRelation
	(*Team)(nil),                               // 27: entities.Team
	(*TeamMemberRelation)(nil),                 // 28: entities.TeamMemberRelation
	(*Compensation)(nil),                       // 29: entities.Compensation
	(*Addition)(nil),                           // 30: entities.Addition
	(*Deducion)(nil),                           // 31: entities.Deducion
	(*CompensationAdditionRelation)(nil),       // 32: entities.CompensationAdditionRelation
	(*CompensationDeductionRelation)(nil),      // 33: entities.CompensationDeductionRelation
	(*Payroll)(nil),                            // 34: entities.Payroll
	(*PayrollCompensationRelation)(nil),        // 35: entities.PayrollCompensationRelation
	(*Attendance)(nil),                         // 36: entities.Attendance
	(*Shift)(nil),                              // 37: entities.Shift
	(*OverrideShift)(nil),                      // 38: entities.OverrideShift
	(*timestamppb.Timestamp)(nil),              // 39: google.protobuf.Timestamp
	(*structpb.Struct)(nil),                    // 40: google.protobuf.Struct
}
var file_hcmcore_proto_depIdxs = []int32{
	39, // 0: entities.Worker.createdAt:type_name -> google.protobuf.Timestamp
	39, // 1: entities.Worker.lastUpdatedAt:type_name -> google.protobuf.Timestamp
	39, // 2: entities.Worker.birthdate:type_name -> google.protobuf.Timestamp
	40, // 3: entities.Worker.addresses:type_name -> google.protobuf.Struct
	39, // 4: entities.WorkerIdentityCard.createdAt:type_name -> google.protobuf.Timestamp
	39, // 5: entities.WorkerIdentityCard.lastUpdatedAt:type_name -> google.protobuf.Timestamp
	40, // 6: entities.WorkerIdentityCard.extractedInfo:type_name -> google.protobuf.Struct
	39, // 7: entities.Organization.createdAt:type_name -> google.protobuf.Timestamp
	39, // 8: entities.Organization.lastUpdatedAt:type_name -> google.protobuf.Timestamp
	4,  // 9: entities.Organization.industry:type_name -> entities.Organization.Industry
	39, // 10: entities.Member.createdAt:type_name -> google.protobuf.Timestamp
	39, // 11: entities.Member.lastUpdatedAt:type_name -> google.protobuf.Timestamp
	39, // 12: entities.Member.hiredAt:type_name -> google.protobuf.Timestamp
	39, // 13: entities.Member.suspendedAt:type_name -> google.protobuf.Timestamp
	39, // 14: entities.Member.leaveAt:type_name -> google.protobuf.Timestamp
	39, // 15: entities.Member.terminatedAt:type_name -> google.protobuf.Timestamp
	39, // 16: entities.Member.returnedAt:type_name -> google.protobuf.Timestamp
	39, // 17: entities.Member.scheduledSuspensionAt:type_name -> google.protobuf.Timestamp
	39, // 18: entities.JoinRequest.createdAt:type_name -> google.protobuf.Timestamp
	39, // 19: entities.JoinRequest.expiredAt:type_name -> google.protobuf.Timestamp
	39, // 20: entities.Role.createdAt:type_name -> google.protobuf.Timestamp
	39, // 21: entities.Role.lastUpdatedAt:type_name -> google.protobuf.Timestamp
	39, // 22: entities.Team.createdAt:type_name -> google.protobuf.Timestamp
	39, // 23: entities.Team.lastUpdatedAt:type_name -> google.protobuf.Timestamp
	39, // 24: entities.Compensation.createdAt:type_name -> google.protobuf.Timestamp
	39, // 25: entities.Compensation.lastUpdatedAt:type_name -> google.protobuf.Timestamp
	39, // 26: entities.Compensation.paidAt:type_name -> google.protobuf.Timestamp
	39, // 27: entities.Compensation.approvedAt:type_name -> google.protobuf.Timestamp
	39, // 28: entities.Compensation.rejectedAt:type_name -> google.protobuf.Timestamp
	39, // 29: entities.Compensation.periodStart:type_name -> google.protobuf.Timestamp
	39, // 30: entities.Compensation.periodEnd:type_name -> google.protobuf.Timestamp
	39, // 31: entities.Addition.createdAt:type_name -> google.protobuf.Timestamp
	39, // 32: entities.Addition.lastUpdatedAt:type_name -> google.protobuf.Timestamp
	39, // 33: entities.Addition.effectiveAt:type_name -> google.protobuf.Timestamp
	39, // 34: entities.Deducion.createdAt:type_name -> google.protobuf.Timestamp
	39, // 35: entities.Deducion.lastUpdatedAt:type_name -> google.protobuf.Timestamp
	39, // 36: entities.Deducion.effectiveAt:type_name -> google.protobuf.Timestamp
	39, // 37: entities.Payroll.createdAt:type_name -> google.protobuf.Timestamp
	39, // 38: entities.Payroll.lastUpdatedAt:type_name -> google.protobuf.Timestamp
	39, // 39: entities.Attendance.createdAt:type_name -> google.protobuf.Timestamp
	39, // 40: entities.Attendance.lastUpdatedAt:type_name -> google.protobuf.Timestamp
	39, // 41: entities.Attendance.clockIn:type_name -> google.protobuf.Timestamp
	39, // 42: entities.Attendance.clockOut:type_name -> google.protobuf.Timestamp
	39, // 43: entities.Shift.createdAt:type_name -> google.protobuf.Timestamp
	39, // 44: entities.Shift.lastUpdatedAt:type_name -> google.protobuf.Timestamp
	0,  // 45: entities.Shift.day:type_name -> entities.ShiftDay
	39, // 46: entities.Shift.clockIn:type_name -> google.protobuf.Timestamp
	39, // 47: entities.Shift.clockOut:type_name -> google.protobuf.Timestamp
	39, // 48: entities.OverrideShift.createdAt:type_name -> google.protobuf.Timestamp
	39, // 49: entities.OverrideShift.lastUpdatedAt:type_name -> google.protobuf.Timestamp
	39, // 50: entities.OverrideShift.verifiedAt:type_name -> google.protobuf.Timestamp
	39, // 51: entities.OverrideShift.completedAt:type_name -> google.protobuf.Timestamp
	39, // 52: entities.OverrideShift.startsOn:type_name -> google.protobuf.Timestamp
	39, // 53: entities.OverrideShift.endsOn:type_name -> google.protobuf.Timestamp
	0,  // 54: entities.OverrideShift.day:type_name -> entities.ShiftDay
	39, // 55: entities.OverrideShift.overrideClockIn:type_name -> google.protobuf.Timestamp
	39, // 56: entities.OverrideShift.overrideClockOut:type_name -> google.protobuf.Timestamp
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_hcmcore_proto_init() }
func file_hcmcore_proto_init() {
	if File_hcmcore_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hcmcore_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Worker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerIdentityCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerIdentityCardRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerOrganizationRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationPendingRequestRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerPendingRequestRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleShiftRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerRoleRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamMemberRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Compensation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deducion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompensationAdditionRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompensationDeductionRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payroll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayrollCompensationRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attendance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcmcore_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverrideShift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hcmcore_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_hcmcore_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_hcmcore_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_hcmcore_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_hcmcore_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_hcmcore_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_hcmcore_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_hcmcore_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_hcmcore_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_hcmcore_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_hcmcore_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_hcmcore_proto_msgTypes[23].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hcmcore_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hcmcore_proto_goTypes,
		DependencyIndexes: file_hcmcore_proto_depIdxs,
		EnumInfos:         file_hcmcore_proto_enumTypes,
		MessageInfos:      file_hcmcore_proto_msgTypes,
	}.Build()
	File_hcmcore_proto = out.File
	file_hcmcore_proto_rawDesc = nil
	file_hcmcore_proto_goTypes = nil
	file_hcmcore_proto_depIdxs = nil
}
